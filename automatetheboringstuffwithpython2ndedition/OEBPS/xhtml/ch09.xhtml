<?xml version="1.0" encoding="UTF-8"?>
<html xml:lang="en-us" lang="en-us" xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xmlns:ns="http://www.w3.org/2001/10/synthesis">
<head>
<title>Automate the Boring Stuff with Python: Practical Programming for Total Beginners, 2nd Edition</title>
<link rel="stylesheet" type="text/css" href="../styles/9781593279936.css"/>
</head>
<body>
<h2 class="h2" id="ch09"><span epub:type="pagebreak" id="page_201"/><strong><span class="big">9</span><br/>READING AND WRITING FILES</strong></h2>
<div class="image1"><img src="../images/09fig00.jpg" alt="Image"/></div>
<p class="noindent">Variables are a fine way to store data while your program is running, but if you want your data to persist even after your program has finished, you need to save it to a file. You can think of a file&#8217;s contents as a single string value, potentially gigabytes in size. In this chapter, you will learn how to use Python to create, read, and save files on the hard drive.</p>
<h3 class="h3" id="ch09lev1sec1"><strong>Files and File Paths</strong></h3>
<p class="noindent">A file has two key properties: a <em>filename</em> (usually written as one word) and a <em>path</em>. The path specifies the location of a file on the computer. For example, there is a file on my Windows laptop with the filename <em>project.docx</em> in the path <em>C:\Users\Al\Documents</em>. The part of the filename after the last period is called the file&#8217;s <em>extension</em> and tells you a file&#8217;s type. The filename <em>project.docx</em> <span epub:type="pagebreak" id="page_202"/>is a Word document, and <em>Users</em>, <em>Al</em>, and <em>Documents</em> all refer to <em>folders</em> (also called <em>directories</em>). Folders can contain files and other folders. For example, <em>project.docx</em> is in the <em>Documents</em> folder, which is inside the <em>Al</em> folder, which is inside the <em>Users</em> folder. <a href="ch09.xhtml#ch09fig01">Figure 9-1</a> shows this folder organization.</p>
<div class="image"><a id="ch09fig01"/><img src="../images/09fig01.jpg" alt="image"/></div>
<p class="figcap"><em>Figure 9-1: A file in a hierarchy of folders</em></p>
<p class="indent">The <em>C:\</em> part of the path is the <em>root folder</em>, which contains all other folders. On Windows, the root folder is named <em>C:\</em> and is also called the <em>C: drive</em>. On macOS and Linux, the root folder is <em>/</em>. In this book, I&#8217;ll use the Windows-style root folder, <em>C:\</em>. If you are entering the interactive shell examples on macOS or Linux, enter <span class="literal">/</span> instead.</p>
<p class="indent">Additional <em>volumes</em>, such as a DVD drive or USB flash drive, will appear differently on different operating systems. On Windows, they appear as new, lettered root drives, such as <em>D:\</em> or <em>E:\</em>. On macOS, they appear as new folders under the <em>/Volumes</em> folder. On Linux, they appear as new folders under the <em>/mnt</em> (&#8220;mount&#8221;) folder. Also note that while folder names and filenames are not case-sensitive on Windows and macOS, they are case-sensitive on Linux.</p>
<div class="note">
<p class="notet"><strong><span class="notes">NOTE</span></strong></p>
<p class="notep"><em>Since your system probably has different files and folders on it than mine, you won&#8217;t be able to follow every example in this chapter exactly. Still, try to follow along using folders that exist on your computer.</em></p>
</div>
<h4 class="h4" id="ch09lev2sec1"><strong><em>Backslash on Windows and Forward Slash on macOS and Linux</em></strong></h4>
<p class="noindent">On Windows, paths are written using backslashes (<span class="literal">\</span>) as the separator between folder names. The macOS and Linux operating systems, however, use the forward slash (<em>/</em>) as their path separator. If you want your programs to work on all operating systems, you will have to write your Python scripts to handle both cases.</p>
<p class="indent">Fortunately, this is simple to do with the <span class="literal">Path()</span> function in the <span class="literal">pathlib</span> module. If you pass it the string values of individual file and folder names in your path, <span class="literal">Path()</span> will return a string with a file path using the correct path separators. Enter the following into the interactive shell:</p>
<p class="programs">&gt;&gt;&gt; <span class="codestrong1">from pathlib import Path</span><br/>
&gt;&gt;&gt; <span class="codestrong1">Path('spam', 'bacon', 'eggs')</span><br/><br/>
WindowsPath('spam/bacon/eggs')<br/>
<span epub:type="pagebreak" id="page_203"/>&gt;&gt;&gt; <span class="codestrong1">str(Path('spam', 'bacon', 'eggs'))</span><br/>
'spam\\bacon\\eggs'</p>
<p class="indent">Note that the convention for importing <span class="literal">pathlib</span> is to run <span class="literal">from pathlib import Path</span>, since otherwise we&#8217;d have to enter <span class="literal">pathlib.Path</span> everywhere <span class="literal">Path</span> shows up in our code. Not only is this extra typing redundant, but it&#8217;s also redundant.</p>
<p class="indent">I&#8217;m running this chapter&#8217;s interactive shell examples on Windows, so <span class="literal">Path('spam', 'bacon', 'eggs')</span> returned a <span class="literal">WindowsPath</span> object for the joined path, represented as <span class="literal">WindowsPath('spam/bacon/eggs')</span>. Even though Windows uses backslashes, the <span class="literal">WindowsPath</span> representation in the interactive shell displays them using forward slashes, since open source software developers have historically favored the Linux operating system.</p>
<p class="indent">If you want to get a simple text string of this path, you can pass it to the <span class="literal">str()</span> function, which in our example returns <span class="literal">'spam\\bacon\\eggs'</span>. (Notice that the backslashes are doubled because each backslash needs to be escaped by another backslash character.) If I had called this function on, say, Linux, <span class="literal">Path()</span> would have returned a <span class="literal">PosixPath</span> object that, when passed to <span class="literal">str()</span>, would have returned <span class="literal">'spam/bacon/eggs'</span>. (<em>POSIX</em> is a set of standards for Unix-like operating systems such as Linux.)</p>
<p class="indent">These <span class="literal">Path</span> objects (really, <span class="literal">WindowsPath</span> or <span class="literal">PosixPath</span> objects, depending on your operating system) will be passed to several of the file-related functions introduced in this chapter. For example, the following code joins names from a list of filenames to the end of a folder&#8217;s name:</p>
<p class="programs">&gt;&gt;&gt; <span class="codestrong1">from pathlib import Path</span><br/>
&gt;&gt;&gt; <span class="codestrong1">myFiles = ['accounts.txt', 'details.csv', 'invite.docx']</span><br/>
&gt;&gt;&gt; <span class="codestrong1">for filename in myFiles:</span><br/>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<span class="codestrong1">print(Path(r'C:\Users\Al', filename))</span><br/>
C:\Users\Al\accounts.txt<br/>
C:\Users\Al\details.csv<br/>
C:\Users\Al\invite.docx</p>
<p class="indent">On Windows, the backslash separates directories, so you can&#8217;t use it in filenames. However, you can use backslashes in filenames on macOS and Linux. So while <span class="literal">Path(r'spam\eggs')</span> refers to two separate folders (or a file <em>eggs</em> in a folder <em>spam</em>) on Windows, the same command would refer to a single folder (or file) named <em>spam\eggs</em> on macOS and Linux. For this reason, it&#8217;s usually a good idea to always use forward slashes in your Python code (and I&#8217;ll be doing so for the rest of this chapter). The <span class="literal">pathlib</span> module will ensure that it always works on all operating systems.</p>
<p class="indent">Note that <span class="literal">pathlib</span> was introduced in Python 3.4 to replace older <span class="literal">os.path</span> functions. The Python Standard Library modules support it as of Python 3.6, but if you are working with legacy Python 2 versions, I recommend using <span class="literal">pathlib2</span>, which gives you <span class="literal">pathlib</span>&#8217;s features on Python 2.7. <a href="app01.xhtml#app01">Appendix A</a> has instructions for installing <span class="literal">pathlib2</span> using pip. Whenever I&#8217;ve replaced an older <span class="literal">os.path</span> function with <span class="literal">pathlib</span>, I&#8217;ve made a short note. You can look up the older functions at <em><a href="https://docs.python.org/3/library/os.path.html">https://docs.python.org/3/library/os.path.html</a></em>.</p>
<h4 class="h4" id="ch09lev2sec2"><span epub:type="pagebreak" id="page_204"/><strong><em>Using the / Operator to Join Paths</em></strong></h4>
<p class="noindent">We normally use the <span class="literal">+</span> operator to add two integer or floating-point numbers, such as in the expression <span class="literal">2 + 2</span>, which evaluates to the integer value <span class="literal">4</span>. But we can also use the <span class="literal">+</span> operator to concatenate two string values, like the expression <span class="literal">'Hello' + 'World'</span>, which evaluates to the string value <span class="literal">'HelloWorld'</span>. Similarly, the <span class="literal">/</span> operator that we normally use for division can also combine <span class="literal">Path</span> objects and strings. This is helpful for modifying a <span class="literal">Path</span> object after you&#8217;ve already created it with the <span class="literal">Path()</span> function.</p>
<p class="indent">For example, enter the following into the interactive shell:</p>
<p class="programs">&gt;&gt;&gt; <span class="codestrong1">from pathlib import Path</span><br/>
&gt;&gt;&gt; <span class="codestrong1">Path('spam') / 'bacon' / 'eggs'</span><br/>
WindowsPath('spam/bacon/eggs')<br/>
&gt;&gt;&gt; <span class="codestrong1">Path('spam') / Path('bacon/eggs')</span><br/>
WindowsPath('spam/bacon/eggs')<br/>
&gt;&gt;&gt; <span class="codestrong1">Path('spam') / Path('bacon', 'eggs')</span><br/>
WindowsPath('spam/bacon/eggs')</p>
<p class="indent">Using the <span class="literal">/</span> operator with <span class="literal">Path</span> objects makes joining paths just as easy as string concatenation. It&#8217;s also safer than using string concatenation or the <span class="literal">join()</span> method, like we do in this example:</p>
<p class="programs">&gt;&gt;&gt; <span class="codestrong1">homeFolder = r'C:\Users\Al'</span><br/>
&gt;&gt;&gt; <span class="codestrong1">subFolder = 'spam'</span><br/>
&gt;&gt;&gt; <span class="codestrong1">homeFolder + '\\' + subFolder</span><br/>
'C:\\Users\\Al\\spam'<br/>
&gt;&gt;&gt; <span class="codestrong1">'\\'.join([homeFolder, subFolder])</span><br/>
'C:\\Users\\Al\\spam'</p>
<p class="indent">A script that uses this code isn&#8217;t safe, because its backslashes would only work on Windows. You could add an <span class="literal">if</span> statement that checks <span class="literal">sys.platform</span> (which contains a string describing the computer&#8217;s operating system) to decide what kind of slash to use, but applying this custom code everywhere it&#8217;s needed can be inconsistent and bug-prone.</p>
<p class="indent">The <span class="literal">pathlib</span> module solves these problems by reusing the <span class="literal">/</span> math division operator to join paths correctly, no matter what operating system your code is running on. The following example uses this strategy to join the same paths as in the previous example:</p>
<p class="programs">&gt;&gt;&gt; <span class="codestrong1">homeFolder = Path('C:/Users/Al')</span><br/>
&gt;&gt;&gt; <span class="codestrong1">subFolder = Path('spam')</span><br/>
&gt;&gt;&gt; <span class="codestrong1">homeFolder / subFolder</span><br/>
WindowsPath('C:/Users/Al/spam')<br/>
&gt;&gt;&gt; <span class="codestrong1">str(homeFolder / subFolder)</span><br/>
'C:\\Users\\Al\\spam'</p>
<p class="indent">The only thing you need to keep in mind when using the <span class="literal">/</span> operator for joining paths is that one of the first two values must be a <span class="literal">Path</span> object. <span epub:type="pagebreak" id="page_205"/>Python will give you an error if you try entering the following into the interactive shell:</p>
<p class="programs">&gt;&gt;&gt; <span class="codestrong1">'spam' / 'bacon' / 'eggs'</span><br/>
Traceback (most recent call last):<br/>
&#160;&#160;File "&lt;stdin&gt;", line 1, in &lt;module&gt;<br/>
TypeError: unsupported operand type(s) for /: 'str' and 'str'</p>
<p class="indent">Python evaluates the <span class="literal">/</span> operator from left to right and evaluates to a <span class="literal">Path</span> object, so either the first or second leftmost value must be a <span class="literal">Path</span> object for the entire expression to evaluate to a <span class="literal">Path</span> object. Here&#8217;s how the <span class="literal">/</span> operator and a <span class="literal">Path</span> object evaluate to the final <span class="literal">Path</span> object.</p>
<div class="image1"><img src="../images/09fig01a.jpg" alt="image"/></div>
<p class="indent">If you see the <span class="literal">TypeError: unsupported operand type(s) for /: 'str' and 'str'</span> error message shown previously, you need to put a <span class="literal">Path</span> object on the left side of the expression.</p>
<p class="indent">The <span class="literal">/</span> operator replaces the older <span class="literal">os.path.join()</span> function, which you can learn more about from <em><a href="https://docs.python.org/3/library/os.path.html#os.path.join">https://docs.python.org/3/library/os.path.html#os.path.join</a></em>.</p>
<h4 class="h4" id="ch09lev2sec3"><strong><em>The Current Working Directory</em></strong></h4>
<p class="noindent">Every program that runs on your computer has a <em>current working directory</em>, or <em>cwd</em>. Any filenames or paths that do not begin with the root folder are assumed to be under the current working directory.</p>
<div class="note">
<p class="notet"><strong><span class="notes">NOTE</span></strong></p>
<p class="notep"><em>While</em> folder <em>is the more modern name for directory, note that</em> current working directory <em>(or just</em> working directory<em>) is the standard term, not &#8220;current working folder.&#8221;</em></p>
</div>
<p class="indent">You can get the current working directory as a string value with the <span class="literal">Path.cwd()</span> function and change it using <span class="literal">os.chdir()</span>. Enter the following into the interactive shell:</p>
<p class="programs">&gt;&gt;&gt; <span class="codestrong1">from pathlib import Path</span><br/>
&gt;&gt;&gt; <span class="codestrong1">import os</span><br/>
&gt;&gt;&gt; <span class="codestrong1">Path.cwd()</span><br/>
WindowsPath('C:/Users/Al/AppData/Local/Programs/Python/Python37')'<br/>
&gt;&gt;&gt; <span class="codestrong1">os.chdir('C:\\Windows\\System32')</span><br/>
&gt;&gt;&gt; <span class="codestrong1">Path.cwd()</span><br/>
WindowsPath('C:/Windows/System32')</p>
<p class="indent"><span epub:type="pagebreak" id="page_206"/>Here, the current working directory is set to <em>C:\Users\Al\AppData\Local\Programs\Python\Python37</em>, so the filename <em>project.docx</em> refers to <em>C:\Users\Al\AppData\Local\Programs\Python\Python37\project.docx</em>. When we change the current working directory to <em>C:\Windows\System32</em>, the filename <em>project.docx</em> is interpreted as <em>C:\Windows\System32\project.docx</em>.</p>
<p class="indent">Python will display an error if you try to change to a directory that does not exist.</p>
<p class="programs">&gt;&gt;&gt; <span class="codestrong1">os.chdir('C:/ThisFolderDoesNotExist')</span><br/>
Traceback (most recent call last):<br/>
&#160;&#160;File "&lt;stdin&gt;", line 1, in &lt;module&gt;<br/>
FileNotFoundError: [WinError 2] The system cannot find the file specified:<br/>
'C:/ThisFolderDoesNotExist'</p>
<p class="indent">There is no <span class="literal">pathlib</span> function for changing the working directory, because changing the current working directory while a program is running can often lead to subtle bugs.</p>
<p class="indent">The <span class="literal">os.getcwd()</span> function is the older way of getting the current working directory as a string.</p>
<h4 class="h4" id="ch09lev2sec4"><strong><em>The Home Directory</em></strong></h4>
<p class="noindent">All users have a folder for their own files on the computer called the <em>home directory</em> or <em>home folder</em>. You can get a <span class="literal">Path</span> object of the home folder by calling <span class="literal">Path.home()</span>:</p>
<p class="programs">&gt;&gt;&gt; <span class="codestrong1">Path.home()</span><br/>
WindowsPath('C:/Users/Al')</p>
<p class="indent">The home directories are located in a set place depending on your operating system:</p>
<ul>
<li class="noindent">On Windows, home directories are under <em>C:\Users</em>.</li>
<li class="noindent">On Mac, home directories are under <em>/Users</em>.</li>
<li class="noindent">On Linux, home directories are often under <em>/home</em>.</li>
</ul>
<p class="indent">Your scripts will almost certainly have permissions to read and write the files under your home directory, so it&#8217;s an ideal place to put the files that your Python programs will work with.</p>
<h4 class="h4" id="ch09lev2sec5"><strong><em>Absolute vs. Relative Paths</em></strong></h4>
<p class="noindent">There are two ways to specify a file path:</p>
<ul>
<li class="noindent">An <em>absolute path</em>, which always begins with the root folder</li>
<li class="noindent">A <em>relative path</em>, which is relative to the program&#8217;s current working directory</li>
</ul>
<p class="indent">There are also the <em>dot</em> (<span class="literal">.</span>) and <em>dot-dot</em> (<span class="literal">..</span>) folders. These are not real folders but special names that can be used in a path. A single period <span epub:type="pagebreak" id="page_207"/>(&#8220;dot&#8221;) for a folder name is shorthand for &#8220;this directory.&#8221; Two periods (&#8220;dot-dot&#8221;) means &#8220;the parent folder.&#8221;</p>
<p class="indent"><a href="ch09.xhtml#ch09fig02">Figure 9-2</a> is an example of some folders and files. When the current working directory is set to <em>C:\bacon</em>, the relative paths for the other folders and files are set as they are in the figure.</p>
<div class="image"><a id="ch09fig02"/><img src="../images/09fig02.jpg" alt="image"/></div>
<p class="figcap"><em>Figure 9-2: The relative paths for folders and files in the working directory</em> C:\bacon</p>
<p class="indent">The <em>.\</em> at the start of a relative path is optional. For example, <em>.\spam.txt</em> and <em>spam.txt</em> refer to the same file.</p>
<h4 class="h4" id="ch09lev2sec6"><strong><em>Creating New Folders Using the os.makedirs() Function</em></strong></h4>
<p class="noindent">Your programs can create new folders (directories) with the <span class="literal">os.makedirs()</span> function. Enter the following into the interactive shell:</p>
<p class="programs">&gt;&gt;&gt; <span class="codestrong1">import os</span><br/>
&gt;&gt;&gt; <span class="codestrong1">os.makedirs('C:\\delicious\\walnut\\waffles')</span></p>
<p class="indent">This will create not just the <em>C:\delicious</em> folder but also a <em>walnut</em> folder inside <em>C:\delicious</em> and a <em>waffles</em> folder inside <em>C:\delicious\walnut</em>. That is, <span class="literal">os.makedirs()</span> will create any necessary intermediate folders in order to ensure that the full path exists. <a href="ch09.xhtml#ch09fig03">Figure 9-3</a> shows this hierarchy of folders.</p>
<div class="image"><a id="ch09fig03"/><img src="../images/09fig03.jpg" alt="image"/></div>
<p class="figcap"><em>Figure 9-3: The result of <span class="literal">os.makedirs('C:\\delicious\\walnut\\waffles')</span></em></p>
<p class="indent"><span epub:type="pagebreak" id="page_208"/>To make a directory from a <span class="literal">Path</span> object, call the <span class="literal">mkdir()</span> method. For example, this code will create a <em>spam</em> folder under the home folder on my computer:</p>
<p class="programs">&gt;&gt;&gt; <span class="codestrong1">from pathlib import Path</span><br/>
&gt;&gt;&gt; <span class="codestrong1">Path(r'C:\Users\Al\spam').mkdir()</span></p>
<p class="indent">Note that <span class="literal">mkdir()</span> can only make one directory at a time; it won&#8217;t make several subdirectories at once like <span class="literal">os.makedirs()</span>.</p>
<h4 class="h4" id="ch09lev2sec7"><strong><em>Handling Absolute and Relative Paths</em></strong></h4>
<p class="noindent">The <span class="literal">pathlib</span> module provides methods for checking whether a given path is an absolute path and returning the absolute path of a relative path.</p>
<p class="indent">Calling the <span class="literal">is_absolute()</span> method on a <span class="literal">Path</span> object will return <span class="literal">True</span> if it represents an absolute path or <span class="literal">False</span> if it represents a relative path. For example, enter the following into the interactive shell, using your own files and folders instead of the exact ones listed here:</p>
<p class="programs">&gt;&gt;&gt; <span class="codestrong1">Path.cwd()</span><br/>
WindowsPath('C:/Users/Al/AppData/Local/Programs/Python/Python37')<br/>
&gt;&gt;&gt; <span class="codestrong1">Path.cwd().is_absolute()</span><br/>
True<br/>
&gt;&gt;&gt; <span class="codestrong1">Path('spam/bacon/eggs').is_absolute()</span><br/>
False</p>
<p class="indent">To get an absolute path from a relative path, you can put <span class="literal">Path.cwd() /</span> in front of the relative <span class="literal">Path</span> object. After all, when we say &#8220;relative path,&#8221; we almost always mean a path that is relative to the current working directory. Enter the following into the interactive shell:</p>
<p class="programs">&gt;&gt;&gt; <span class="codestrong1">Path('my/relative/path')</span><br/>
WindowsPath('my/relative/path')<br/>
&gt;&gt;&gt; <span class="codestrong1">Path.cwd() / Path('my/relative/path')</span><br/>
WindowsPath('C:/Users/Al/AppData/Local/Programs/Python/Python37/my/relative/<br/>
path')</p>
<p class="indent">If your relative path is relative to another path besides the current working directory, just replace <span class="literal">Path.cwd()</span> with that other path instead. The following example gets an absolute path using the home directory instead of the current working directory:</p>
<p class="programs">&gt;&gt;&gt; <span class="codestrong1">Path('my/relative/path')</span><br/>
WindowsPath('my/relative/path')<br/>
&gt;&gt;&gt; <span class="codestrong1">Path.home() / Path('my/relative/path')</span><br/>
WindowsPath('C:/Users/Al/my/relative/path')</p>
<p class="indent"><span epub:type="pagebreak" id="page_209"/>The <span class="literal">os.path</span> module also has some useful functions related to absolute and relative paths:</p>
<ul>
<li class="noindent">Calling <span class="literal">os.path.abspath(</span><span class="codeitalic">path</span><span class="literal">)</span> will return a string of the absolute path of the argument. This is an easy way to convert a relative path into an absolute one.</li>
<li class="noindent">Calling <span class="literal">os.path.isabs(</span><span class="codeitalic">path</span><span class="literal">)</span> will return <span class="literal">True</span> if the argument is an absolute path and <span class="literal">False</span> if it is a relative path.</li>
<li class="noindent">Calling <span class="literal">os.path.relpath(</span><span class="codeitalic">path</span><span class="literal">,</span> <span class="codeitalic">start</span><span class="literal">)</span> will return a string of a relative path from the <span class="codeitalic">start</span> path to <span class="codeitalic">path</span>. If <span class="codeitalic">start</span> is not provided, the current working directory is used as the start path.</li>
</ul>
<p class="indent">Try these functions in the interactive shell:</p>
<p class="programs">&gt;&gt;&gt; <span class="codestrong1">os.path.abspath('.')</span><br/><br/>
'C:\\Users\\Al\\AppData\\Local\\Programs\\Python\\Python37'<br/>
&gt;&gt;&gt; <span class="codestrong1">os.path.abspath('.\\Scripts')</span><br/>
'C:\\Users\\Al\\AppData\\Local\\Programs\\Python\\Python37\\Scripts'<br/>
&gt;&gt;&gt; <span class="codestrong1">os.path.isabs('.')</span><br/>
False<br/>
&gt;&gt;&gt; <span class="codestrong1">os.path.isabs(os.path.abspath('.'))</span><br/>
True</p>
<p class="indent">Since <em>C:\Users\Al\AppData\Local\Programs\Python\Python37</em> was the working directory when <span class="literal">os.path.abspath()</span> was called, the &#8220;single-dot&#8221; folder represents the absolute path <span class="literal">'C:\\Users\\Al\\AppData\\Local\\Programs\\Python\\Python37'</span>.</p>
<p class="indent">Enter the following calls to <span class="literal">os.path.relpath()</span> into the interactive shell:</p>
<p class="programs">&gt;&gt;&gt; <span class="codestrong1">os.path.relpath('C:\\Windows', 'C:\\')</span><br/>
'Windows'<br/>
&gt;&gt;&gt; <span class="codestrong1">os.path.relpath('C:\\Windows', 'C:\\spam\\eggs')</span><br/>
'..\\..\\Windows'</p>
<p class="indent">When the relative path is within the same parent folder as the path, but is within subfolders of a different path, such as <span class="literal">'C:\\Windows'</span> and <span class="literal">'C:\\spam\\eggs'</span>, you can use the &#8220;dot-dot&#8221; notation to return to the parent folder.</p>
<h4 class="h4" id="ch09lev2sec8"><strong><em>Getting the Parts of a File Path</em></strong></h4>
<p class="noindent">Given a <span class="literal">Path</span> object, you can extract the file path&#8217;s different parts as strings using several <span class="literal">Path</span> object attributes. These can be useful for constructing new file paths based on existing ones. The attributes are diagrammed in <a href="ch09.xhtml#ch09fig04">Figure 9-4</a>.</p>
<div class="image"><span epub:type="pagebreak" id="page_210"/><a id="ch09fig04"/><img src="../images/09fig04.jpg" alt="image"/></div>
<p class="figcap"><em>Figure 9-4: The parts of a Windows (top) and macOS/Linux (bottom) file path</em></p>
<p class="indent">The parts of a file path include the following:</p>
<ul>
<li class="noindent">The <em>anchor</em>, which is the root folder of the filesystem</li>
<li class="noindent">On Windows, the <em>drive</em>, which is the single letter that often denotes a physical hard drive or other storage device</li>
<li class="noindent">The <em>parent</em>, which is the folder that contains the file</li>
<li class="noindent">The <em>name</em> of the file, made up of the <em>stem</em> (or <em>base name</em>) and the <em>suffix</em> (or <em>extension</em>)</li>
</ul>
<p class="indent">Note that Windows <span class="literal">Path</span> objects have a <span class="literal">drive</span> attribute, but macOS and Linux <span class="literal">Path</span> objects don&#8217;t. The <span class="literal">drive</span> attribute doesn&#8217;t include the first backslash.</p>
<p class="indent">To extract each attribute from the file path, enter the following into the interactive shell:</p>
<p class="programs">&gt;&gt;&gt; <span class="codestrong1">p = Path('C:/Users/Al/spam.txt')</span><br/>
&gt;&gt;&gt; <span class="codestrong1">p.anchor</span><br/>
'C:\\'<br/>
&gt;&gt;&gt; <span class="codestrong1">p.parent</span> # This is a Path object, not a string.<br/>
WindowsPath('C:/Users/Al')<br/>
&gt;&gt;&gt; <span class="codestrong1">p.name</span><br/>
'spam.txt'<br/>
&gt;&gt;&gt; <span class="codestrong1">p.stem</span><br/>
'spam'<br/>
&gt;&gt;&gt; <span class="codestrong1">p.suffix</span><br/>
'.txt'<br/>
&gt;&gt;&gt; <span class="codestrong1">p.drive</span><br/>
'C:'</p>
<p class="indent">These attributes evaluate to simple string values, except for <span class="literal">parent</span>, which evaluates to another <span class="literal">Path</span> object.</p>
<p class="indent"><span epub:type="pagebreak" id="page_211"/>The <span class="literal">parents</span> attribute (which is different from the <span class="literal">parent</span> attribute) evaluates to the ancestor folders of a <span class="literal">Path</span> object with an integer index:</p>
<p class="programs">&gt;&gt;&gt; <span class="codestrong1">Path.cwd()</span><br/>
WindowsPath('C:/Users/Al/AppData/Local/Programs/Python/Python37')<br/>
&gt;&gt;&gt; <span class="codestrong1">Path.cwd().parents[0]</span><br/>
WindowsPath('C:/Users/Al/AppData/Local/Programs/Python')<br/>
&gt;&gt;&gt; <span class="codestrong1">Path.cwd().parents[1]</span><br/>
WindowsPath('C:/Users/Al/AppData/Local/Programs')<br/>
&gt;&gt;&gt; <span class="codestrong1">Path.cwd().parents[2]</span><br/>
WindowsPath('C:/Users/Al/AppData/Local')<br/>
&gt;&gt;&gt; <span class="codestrong1">Path.cwd().parents[3]</span><br/>
WindowsPath('C:/Users/Al/AppData')<br/>
&gt;&gt;&gt; <span class="codestrong1">Path.cwd().parents[4]</span><br/>
WindowsPath('C:/Users/Al')<br/>
&gt;&gt;&gt; <span class="codestrong1">Path.cwd().parents[5]</span><br/>
WindowsPath('C:/Users')<br/>
&gt;&gt;&gt; <span class="codestrong1">Path.cwd().parents[6]</span><br/>
WindowsPath('C:/')</p>
<p class="indent">The older <span class="literal">os.path</span> module also has similar functions for getting the different parts of a path written in a string value. Calling <span class="literal">os.path.dirname(</span><span class="codeitalic">path</span><span class="literal">)</span> will return a string of everything that comes before the last slash in the <span class="literal">path</span> argument. Calling <span class="literal">os.path.basename(</span><span class="codeitalic">path</span><span class="literal">)</span> will return a string of everything that comes after the last slash in the <span class="literal">path</span> argument. The directory (or dir) name and base name of a path are outlined in <a href="ch09.xhtml#ch09fig05">Figure 9-5</a>.</p>
<div class="image"><a id="ch09fig05"/><img src="../images/09fig05.jpg" alt="image"/></div>
<p class="figcap"><em>Figure 9-5: The base name follows the last slash in a path and is the same as the filename. The dir name is everything before the last slash.</em></p>
<p class="indent">For example, enter the following into the interactive shell:</p>
<p class="programs">&gt;&gt;&gt; <span class="codestrong1">calcFilePath = 'C:\\Windows\\System32\\calc.exe'</span><br/>
&gt;&gt;&gt; <span class="codestrong1">os.path.basename(calcFilePath)</span><br/>
'calc.exe'<br/>
&gt;&gt;&gt; <span class="codestrong1">os.path.dirname(calcFilePath)</span><br/>
'C:\\Windows\\System32'</p>
<p class="indent">If you need a path&#8217;s dir name and base name together, you can just call <span class="literal">os.path.split()</span> to get a tuple value with these two strings, like so:</p>
<p class="programs">&gt;&gt;&gt; <span class="codestrong1">calcFilePath = 'C:\\Windows\\System32\\calc.exe'</span><br/>
&gt;&gt;&gt; <span class="codestrong1">os.path.split(calcFilePath)</span><br/>
('C:\\Windows\\System32', 'calc.exe')</p>
<p class="indent"><span epub:type="pagebreak" id="page_212"/>Notice that you could create the same tuple by calling <span class="literal">os.path.dirname()</span> and <span class="literal">os.path.basename()</span> and placing their return values in a tuple:</p>
<p class="programs">&gt;&gt;&gt; <span class="codestrong1">(os.path.dirname(calcFilePath), os.path.basename(calcFilePath))</span><br/>
('C:\\Windows\\System32', 'calc.exe')</p>
<p class="indent">But <span class="literal">os.path.split()</span> is a nice shortcut if you need both values.</p>
<p class="indent">Also, note that <span class="literal">os.path.split()</span> does <em>not</em> take a file path and return a list of strings of each folder. For that, use the <span class="literal">split()</span> string method and split on the string in <span class="literal">os.sep</span>. (Note that <span class="literal">sep</span> is in <span class="literal">os</span>, not <span class="literal">os.path</span>.) The <span class="literal">os.sep</span> variable is set to the correct folder-separating slash for the computer running the program, <span class="literal">'\\'</span> on Windows and <span class="literal">'/'</span> on macOS and Linux, and splitting on it will return a list of the individual folders.</p>
<p class="indent">For example, enter the following into the interactive shell:</p>
<p class="programs">&gt;&gt;&gt; <span class="codestrong1">calcFilePath.split(os.sep)</span><br/>
['C:', 'Windows', 'System32', 'calc.exe']</p>
<p class="indent">This returns all the parts of the path as strings.</p>
<p class="indent">On macOS and Linux systems, the returned list of folders will begin with a blank string, like this:</p>
<p class="programs">&gt;&gt;&gt; <span class="codestrong1">'/usr/bin'.split(os. sep)</span><br/>
['', 'usr', 'bin']</p>
<p class="indent">The <span class="literal">split()</span> string method will work to return a list of each part of the path.</p>
<h4 class="h4" id="ch09lev2sec9"><strong><em>Finding File Sizes and Folder Contents</em></strong></h4>
<p class="noindent">Once you have ways of handling file paths, you can then start gathering information about specific files and folders. The <span class="literal">os.path</span> module provides functions for finding the size of a file in bytes and the files and folders inside a given folder.</p>
<ul>
<li class="noindent">Calling <span class="literal">os.path.getsize(</span><span class="codeitalic">path</span><span class="literal">)</span> will return the size in bytes of the file in the <span class="codeitalic">path</span> argument.</li>
<li class="noindent">Calling <span class="literal">os.listdir(</span><span class="codeitalic">path</span><span class="literal">)</span> will return a list of filename strings for each file in the <span class="codeitalic">path</span> argument. (Note that this function is in the <span class="literal">os</span> module, not <span class="literal">os.path</span>.)</li>
</ul>
<p class="indent">Here&#8217;s what I get when I try these functions in the interactive shell:</p>
<p class="programs">&gt;&gt;&gt; <span class="codestrong1">os.path.getsize('C:\\Windows\\System32\\calc.exe')</span><br/>
27648<br/>
&gt;&gt;&gt; <span class="codestrong1">os.listdir('C:\\Windows\\System32')</span><br/>
['0409', '12520437.cpx', '12520850.cpx', '5U877.ax', 'aaclient.dll',<br/>
--<span class="codeitalic1">snip</span>--<br/>
'xwtpdui.dll', 'xwtpw32.dll', 'zh-CN', 'zh-HK', 'zh-TW', 'zipfldr.dll']</p>
<p class="indent"><span epub:type="pagebreak" id="page_213"/>As you can see, the <em>calc.exe</em> program on my computer is 27,648 bytes in size, and I have a lot of files in <em>C:\Windows\system32</em>. If I want to find the total size of all the files in this directory, I can use <span class="literal">os.path.getsize()</span> and <span class="literal">os.listdir()</span> together.</p>
<p class="programs">&gt;&gt;&gt; <span class="codestrong1">totalSize = 0</span><br/>
&gt;&gt;&gt; <span class="codestrong1">for filename in os.listdir('C:\\Windows\\System32'):</span><br/>
&#160;&#160;&#160;&#160;&#160;&#160;<span class="codestrong1">totalSize = totalSize + os.path.getsize(os.path.join('C:\\Windows\\System32', filename))</span><br/>
&gt;&gt;&gt; <span class="codestrong1">print(totalSize)</span><br/>
2559970473</p>
<p class="indent">As I loop over each filename in the <em>C:\Windows\System32</em> folder, the <span class="literal">totalSize</span> variable is incremented by the size of each file. Notice how when I call <span class="literal">os.path.getsize()</span>, I use <span class="literal">os.path.join()</span> to join the folder name with the current filename. The integer that <span class="literal">os.path.getsize()</span> returns is added to the value of <span class="literal">totalSize</span>. After looping through all the files, I print <span class="literal">totalSize</span> to see the total size of the <em>C:\Windows\System32</em> folder.</p>
<h4 class="h4" id="ch09lev2sec10"><strong><em>Modifying a List of Files Using Glob Patterns</em></strong></h4>
<p class="noindent">If you want to work on specific files, the <span class="literal">glob()</span> method is simpler to use than <span class="literal">listdir()</span>. Path objects have a <span class="literal">glob()</span> method for listing the contents of a folder according to a <em>glob pattern</em>. Glob patterns are like a simplified form of regular expressions often used in command line commands. The <span class="literal">glob()</span> method returns a generator object (which are beyond the scope of this book) that you&#8217;ll need to pass to <span class="literal">list()</span> to easily view in the interactive shell:</p>
<p class="programs">&gt;&gt;&gt; <span class="codestrong1">p = Path('C:/Users/Al/Desktop')</span><br/>
&gt;&gt;&gt; <span class="codestrong1">p.glob('*')</span> <br/>
&lt;generator object Path.glob at 0x000002A6E389DED0&gt;<br/>
&gt;&gt;&gt; <span class="codestrong1">list(p.glob('*'))</span> # Make a list from the generator.<br/>
[WindowsPath('C:/Users/Al/Desktop/1.png'), WindowsPath('C:/Users/Al/<br/>
Desktop/22-ap.pdf'), WindowsPath('C:/Users/Al/Desktop/cat.jpg'),<br/>
&#160;&#160;<span class="codeitalic1">--snip--</span><br/>
WindowsPath('C:/Users/Al/Desktop/zzz.txt')]</p>
<p class="indent">The asterisk (<span class="literal">*</span>) stands for &#8220;multiple of any characters,&#8221; so <span class="literal">p.glob('*')</span> returns a generator of all files in the path stored in <span class="literal">p</span>.</p>
<p class="indent">Like with regexes, you can create complex expressions:</p>
<p class="programs">&gt;&gt;&gt; <span class="codestrong1">list(p.glob('*.txt')</span> # Lists all text files.<br/>
[WindowsPath('C:/Users/Al/Desktop/foo.txt'),<br/>
<span class="codeitalic1">&#160;&#160;--snip--</span><br/>
WindowsPath('C:/Users/Al/Desktop/zzz.txt')]</p>
<p class="indent">The glob pattern <span class="literal">'*.txt'</span> will return files that start with any combination of characters as long as it ends with the string <span class="literal">'.txt'</span>, which is the text file extension.</p>
<p class="indent"><span epub:type="pagebreak" id="page_214"/>In contrast with the asterisk, the question mark (<span class="literal">?</span>) stands for any single character:</p>
<p class="programs">&gt;&gt;&gt; <span class="codestrong1">list(p.glob('project?.docx')</span><br/>
[WindowsPath('C:/Users/Al/Desktop/project1.docx'), WindowsPath('C:/Users/Al/<br/>
Desktop/project2.docx'),<br/>
<span class="codeitalic1">&#160;&#160;--snip--</span><br/>
WindowsPath('C:/Users/Al/Desktop/project9.docx')]</p>
<p class="indent">The glob expression <span class="literal">'project?.docx'</span> will return <span class="literal">'project1.docx'</span> or <span class="literal">'project5.docx'</span>, but it will not return <span class="literal">'project10.docx'</span>, because <span class="literal">?</span> only matches to one character&#8212;so it will not match to the two-character string <span class="literal">'10'</span>.</p>
<p class="indent">Finally, you can also combine the asterisk and question mark to create even more complex glob expressions, like this:</p>
<p class="programs">&gt;&gt;&gt; <span class="codestrong1">list(p.glob('*.?x?')</span><br/>
[WindowsPath('C:/Users/Al/Desktop/calc.exe'), WindowsPath('C:/Users/Al/<br/>
Desktop/foo.txt'),<br/>
<span class="codeitalic1">&#160;&#160;--snip--</span><br/>
WindowsPath('C:/Users/Al/Desktop/zzz.txt')]</p>
<p class="indent">The glob expression <span class="literal">'*.?x?'</span> will return files with any name and any three-character extension where the middle character is an <span class="literal">'x'</span>.</p>
<p class="indent">By picking out files with specific attributes, the <span class="literal">glob()</span> method lets you easily specify the files in a directory you want to perform some operation on. You can use a <span class="literal">for</span> loop to iterate over the generator that <span class="literal">glob()</span> returns:</p>
<p class="programs">&gt;&gt;&gt; <span class="codestrong1">p = Path('C:/Users/Al/Desktop')</span><br/>
&gt;&gt;&gt; <span class="codestrong1">for textFilePathObj in p.glob('*.txt'):</span><br/>
...&#160;&#160;&#160;&#160;&#160;<span class="codestrong1">print(textFilePathObj)</span> <span class="codeitalic1"><span class="codestrong1"># Prints the Path object as a string.</span></span><br/>
...&#160;&#160;&#160;&#160;&#160;<span class="codeitalic1"><span class="codestrong1"># Do something with the text file.</span></span><br/>
...<br/>
C:\Users\Al\Desktop\foo.txt<br/>
C:\Users\Al\Desktop\spam.txt<br/>
C:\Users\Al\Desktop\zzz.txt</p>
<p class="indent">If you want to perform some operation on every file in a directory, you can use either <span class="literal">os.listdir(p)</span> or <span class="literal">p.glob('*')</span>.</p>
<h4 class="h4" id="ch09lev2sec11"><strong><em>Checking Path Validity</em></strong></h4>
<p class="noindent">Many Python functions will crash with an error if you supply them with a path that does not exist. Luckily, <span class="literal">Path</span> objects have methods to check whether a given path exists and whether it is a file or folder. Assuming that a variable <span class="literal">p</span> holds a <span class="literal">Path</span> object, you could expect the following:</p>
<ul>
<li class="noindent">Calling <span class="literal">p.exists()</span> returns <span class="literal">True</span> if the path exists or returns <span class="literal">False</span> if it doesn&#8217;t exist.</li>
<li class="noindent">Calling <span class="literal">p.is_file()</span> returns <span class="literal">True</span> if the path exists and is a file, or returns <span class="literal">False</span> otherwise.</li>
<li class="noindent"><span epub:type="pagebreak" id="page_215"/>Calling <span class="literal">p.is_dir()</span> returns <span class="literal">True</span> if the path exists and is a directory, or returns <span class="literal">False</span> otherwise.</li>
</ul>
<p class="indent">On my computer, here&#8217;s what I get when I try these methods in the interactive shell:</p>
<p class="programs">&gt;&gt;&gt; <span class="codestrong1">winDir = Path('C:/Windows')</span><br/>
&gt;&gt;&gt; <span class="codestrong1">notExistsDir = Path('C:/This/Folder/Does/Not/Exist')</span><br/>
&gt;&gt;&gt; <span class="codestrong1">calcFile = Path('C:/Windows</span><br/>
<span class="codestrong1">/System32/calc.exe')</span><br/>
&gt;&gt;&gt; <span class="codestrong1">winDir.exists()</span><br/>
True<br/>
&gt;&gt;&gt; <span class="codestrong1">winDir.is_dir()</span><br/>
True<br/>
&gt;&gt;&gt; <span class="codestrong1">notExistsDir.exists()</span><br/>
False<br/>
&gt;&gt;&gt; <span class="codestrong1">calcFile.is_file()</span><br/>
True<br/>
&gt;&gt;&gt; <span class="codestrong1">calcFile.is_dir()</span><br/>
False</p>
<p class="indent">You can determine whether there is a DVD or flash drive currently attached to the computer by checking for it with the <span class="literal">exists()</span> method. For instance, if I wanted to check for a flash drive with the volume named <em>D:\</em> on my Windows computer, I could do that with the following:</p>
<p class="programs">&gt;&gt;&gt; <span class="codestrong1">dDrive = Path('D:/')</span><br/>
&gt;&gt;&gt; <span class="codestrong1">dDrive.exists()</span><br/>
False</p>
<p class="indent">Oops! It looks like I forgot to plug in my flash drive.</p>
<p class="indent">The older <span class="literal">os.path</span> module can accomplish the same task with the <span class="literal">os.path.exists(</span><span class="codeitalic">path</span><span class="literal">)</span>, <span class="literal">os.path.isfile(</span><span class="codeitalic">path</span><span class="literal">)</span>, and <span class="literal">os.path.isdir(</span><span class="codeitalic">path</span><span class="literal">)</span> functions, which act just like their <span class="literal">Path</span> function counterparts. As of Python 3.6, these functions can accept <span class="literal">Path</span> objects as well as strings of the file paths.</p>
<h3 class="h3" id="ch09lev1sec2"><strong>The File Reading/Writing Process</strong></h3>
<p class="noindent">Once you are comfortable working with folders and relative paths, you&#8217;ll be able to specify the location of files to read and write. The functions covered in the next few sections will apply to plaintext files. <em>Plaintext files</em> contain only basic text characters and do not include font, size, or color information. Text files with the <em>.txt</em> extension or Python script files with the <em>.py</em> extension are examples of plaintext files. These can be opened with Windows&#8217;s Notepad or macOS&#8217;s TextEdit application. Your programs can easily read the contents of plaintext files and treat them as an ordinary string value.</p>
<p class="indent"><em>Binary files</em> are all other file types, such as word processing documents, PDFs, images, spreadsheets, and executable programs. If you open a binary <span epub:type="pagebreak" id="page_216"/>file in Notepad or TextEdit, it will look like scrambled nonsense, like in <a href="ch09.xhtml#ch09fig06">Figure 9-6</a>.</p>
<div class="image"><a id="ch09fig06"/><img src="../images/09fig06.jpg" alt="image"/></div>
<p class="figcap"><em>Figure 9-6: The Windows <span class="literal">calc.exe</span> program opened in Notepad</em></p>
<p class="indent">Since every different type of binary file must be handled in its own way, this book will not go into reading and writing raw binary files directly. Fortunately, many modules make working with binary files easier&#8212;you will explore one of them, the <span class="literal">shelve</span> module, later in this chapter. The <span class="literal">pathlib</span> module&#8217;s <span class="literal">read_text()</span> method returns a string of the full contents of a text file. Its <span class="literal">write_text()</span> method creates a new text file (or overwrites an existing one) with the string passed to it. Enter the following into the interactive shell:</p>
<p class="programs">&gt;&gt;&gt; <span class="codestrong1">from pathlib import Path</span><br/>
&gt;&gt;&gt; <span class="codestrong1">p = Path('spam.txt')</span><br/>
&gt;&gt;&gt; <span class="codestrong1">p.write_text('Hello, world!')</span><br/>
13<br/>
&gt;&gt;&gt; <span class="codestrong1">p.read_text()</span><br/>
'Hello, world!'</p>
<p class="indent">These method calls create a <em>spam.txt</em> file with the content <span class="literal">'Hello, world!'</span>. The <span class="literal">13</span> that <span class="literal">write_text()</span> returns indicates that 13 characters were written to the file. (You can often disregard this information.) The <span class="literal">read_text()</span> call reads and returns the contents of our new file as a string: <span class="literal">'Hello, world!'</span>.</p>
<p class="indent">Keep in mind that these <span class="literal">Path</span> object methods only provide basic interactions with files. The more common way of writing to a file involves using the <span class="literal">open()</span> function and file objects. There are three steps to reading or writing files in Python:</p>
<ol>
<li class="noindent">Call the <span class="literal">open()</span> function to return a <span class="literal">File</span> object.</li>
<li class="noindent">Call the <span class="literal">read()</span> or <span class="literal">write()</span> method on the <span class="literal">File</span> object.</li>
<li class="noindent">Close the file by calling the <span class="literal">close()</span> method on the <span class="literal">File</span> object.</li>
</ol>
<p class="indent">We&#8217;ll go over these steps in the following sections.</p>
<h4 class="h4" id="ch09lev2sec12"><span epub:type="pagebreak" id="page_217"/><strong><em>Opening Files with the open() Function</em></strong></h4>
<p class="noindent">To open a file with the <span class="literal">open()</span> function, you pass it a string path indicating the file you want to open; it can be either an absolute or relative path. The <span class="literal">open()</span> function returns a <span class="literal">File</span> object.</p>
<p class="indent">Try it by creating a text file named <em>hello.txt</em> using Notepad or TextEdit. Type <strong>Hello, world!</strong> as the content of this text file and save it in your user home folder. Then enter the following into the interactive shell:</p>
<p class="programs">&gt;&gt;&gt; <span class="codestrong1">helloFile = open(Path.home() / 'hello.txt')</span></p>
<p class="indent">The <span class="literal">open()</span> function can also accept strings. If you&#8217;re using Windows, enter the following into the interactive shell:</p>
<p class="programs">&gt;&gt;&gt; <span class="codestrong1">helloFile = open('C:\\Users\\</span><span class="codeitalic1"><span class="codestrong1">your_home_folder</span></span><span class="codestrong1">\\hello.txt')</span></p>
<p class="indent">If you&#8217;re using macOS, enter the following into the interactive shell instead:</p>
<p class="programs">&gt;&gt;&gt; <span class="codestrong1">helloFile = open('/Users/</span><span class="codeitalic1"><span class="codestrong1">your_home_folder</span></span><span class="codestrong1">/hello.txt')</span></p>
<p class="indent">Make sure to replace <span class="codeitalic">your_home_folder</span> with your computer username. For example, my username is <em>Al</em>, so I&#8217;d enter <span class="literal">'C:\\Users\\Al\\hello.txt'</span> on Windows. Note that the <span class="literal">open()</span> function only accepts <span class="literal">Path</span> objects as of Python 3.6. In previous versions, you always need to pass a string to <span class="literal">open()</span>.</p>
<p class="indent">Both these commands will open the file in &#8220;reading plaintext&#8221; mode, or <em>read mode</em> for short. When a file is opened in read mode, Python lets you only read data from the file; you can&#8217;t write or modify it in any way. Read mode is the default mode for files you open in Python. But if you don&#8217;t want to rely on Python&#8217;s defaults, you can explicitly specify the mode by passing the string value <span class="literal">'r'</span> as a second argument to <span class="literal">open()</span>. So <span class="literal">open('/Users/Al/hello.txt', 'r')</span> and <span class="literal">open('/Users/Al/hello.txt')</span> do the same thing.</p>
<p class="indent">The call to <span class="literal">open()</span> returns a <span class="literal">File</span> object. A <span class="literal">File</span> object represents a file on your computer; it is simply another type of value in Python, much like the lists and dictionaries you&#8217;re already familiar with. In the previous example, you stored the <span class="literal">File</span> object in the variable <span class="literal">helloFile</span>. Now, whenever you want to read from or write to the file, you can do so by calling methods on the <span class="literal">File</span> object in <span class="literal">helloFile</span>.</p>
<h4 class="h4" id="ch09lev2sec13"><strong><em>Reading the Contents of Files</em></strong></h4>
<p class="noindent">Now that you have a <span class="literal">File</span> object, you can start reading from it. If you want to read the entire contents of a file as a string value, use the <span class="literal">File</span> object&#8217;s <span class="literal">read()</span> method. Let&#8217;s continue with the <em>hello.txt</em> <span class="literal">File</span> object you stored in <span class="literal">helloFile</span>. Enter the following into the interactive shell:</p>
<p class="programs">&gt;&gt;&gt; <span class="codestrong1">helloContent = helloFile.read()</span><br/>
&gt;&gt;&gt; <span class="codestrong1">helloContent</span><br/>
'Hello, world!'</p>
<p class="indent"><span epub:type="pagebreak" id="page_218"/>If you think of the contents of a file as a single large string value, the <span class="literal">read()</span> method returns the string that is stored in the file.</p>
<p class="indent">Alternatively, you can use the <span class="literal">readlines()</span> method to get a <em>list</em> of string values from the file, one string for each line of text. For example, create a file named <em>sonnet29.txt</em> in the same directory as <em>hello.txt</em> and write the following text in it:</p>
<p class="programs">When, in disgrace with fortune and men's eyes,<br/>
I all alone beweep my outcast state,<br/>
And trouble deaf heaven with my bootless cries,<br/>
And look upon myself and curse my fate,</p>
<p class="indent">Make sure to separate the four lines with line breaks. Then enter the following into the interactive shell:</p>
<p class="programs">&gt;&gt;&gt; <span class="codestrong1">sonnetFile = open(Path.home() / 'sonnet29.txt')</span><br/>
&gt;&gt;&gt; <span class="codestrong1">sonnetFile.readlines()</span><br/>
[When, in disgrace with fortune and men's eyes,\n', ' I all alone beweep my<br/>
outcast state,\n', And trouble deaf heaven with my bootless cries,\n', And<br/>
look upon myself and curse my fate,']</p>
<p class="indent">Note that, except for the last line of the file, each of the string values ends with a newline character <span class="literal">\n</span>. A list of strings is often easier to work with than a single large string value.</p>
<h4 class="h4" id="ch09lev2sec14"><strong><em>Writing to Files</em></strong></h4>
<p class="noindent">Python allows you to write content to a file in a way similar to how the <span class="literal">print()</span> function &#8220;writes&#8221; strings to the screen. You can&#8217;t write to a file you&#8217;ve opened in read mode, though. Instead, you need to open it in &#8220;write plaintext&#8221; mode or &#8220;append plaintext&#8221; mode, or <em>write mode</em> and <em>append mode</em> for short.</p>
<p class="indent">Write mode will overwrite the existing file and start from scratch, just like when you overwrite a variable&#8217;s value with a new value. Pass <span class="literal">'w'</span> as the second argument to <span class="literal">open()</span> to open the file in write mode. Append mode, on the other hand, will append text to the end of the existing file. You can think of this as appending to a list in a variable, rather than overwriting the variable altogether. Pass <span class="literal">'a'</span> as the second argument to <span class="literal">open()</span> to open the file in append mode.</p>
<p class="indent">If the filename passed to <span class="literal">open()</span> does not exist, both write and append mode will create a new, blank file. After reading or writing a file, call the <span class="literal">close()</span> method before opening the file again.</p>
<p class="indent">Let&#8217;s put these concepts together. Enter the following into the interactive shell:</p>
<p class="programs">&gt;&gt;&gt; <span class="codestrong1">baconFile = open('bacon.txt', 'w')&#160;&#160;&#160;</span><br/>
&gt;&gt;&gt; <span class="codestrong1">baconFile.write('Hello, world!\n')</span><br/>
13<br/>
&gt;&gt;&gt; <span class="codestrong1">baconFile.close()</span><br/>
&gt;&gt;&gt; <span class="codestrong1">baconFile = open('bacon.txt', 'a')</span><br/>
&gt;&gt;&gt; <span class="codestrong1">baconFile.write('Bacon is not a vegetable.')</span><br/>
<span epub:type="pagebreak" id="page_219"/>25<br/>
&gt;&gt;&gt; <span class="codestrong1">baconFile.close()</span><br/>
&gt;&gt;&gt; <span class="codestrong1">baconFile = open('bacon.txt')</span><br/>
&gt;&gt;&gt; <span class="codestrong1">content = baconFile.read()</span><br/>
&gt;&gt;&gt; <span class="codestrong1">baconFile.close()</span><br/>
&gt;&gt;&gt; <span class="codestrong1">print(content)</span><br/>
Hello, world!<br/>
Bacon is not a vegetable.</p>
<p class="indent">First, we open <em>bacon.txt</em> in write mode. Since there isn&#8217;t a <em>bacon.txt</em> yet, Python creates one. Calling <span class="literal">write()</span> on the opened file and passing <span class="literal">write()</span> the string argument <span class="literal">'Hello, world! /n'</span> writes the string to the file and returns the number of characters written, including the newline. Then we close the file.</p>
<p class="indent">To add text to the existing contents of the file instead of replacing the string we just wrote, we open the file in append mode. We write <span class="literal">'Bacon is not a vegetable.'</span> to the file and close it. Finally, to print the file contents to the screen, we open the file in its default read mode, call <span class="literal">read()</span>, store the resulting <span class="literal">File</span> object in <span class="literal">content</span>, close the file, and print <span class="literal">content</span>.</p>
<p class="indent">Note that the <span class="literal">write()</span> method does not automatically add a newline character to the end of the string like the <span class="literal">print()</span> function does. You will have to add this character yourself.</p>
<p class="indent">As of Python 3.6, you can also pass a <span class="literal">Path</span> object to the <span class="literal">open()</span> function instead of a string for the filename.</p>
<h3 class="h3" id="ch09lev1sec3"><strong>Saving Variables with the shelve Module</strong></h3>
<p class="noindent">You can save variables in your Python programs to binary shelf files using the <span class="literal">shelve</span> module. This way, your program can restore data to variables from the hard drive. The <span class="literal">shelve</span> module will let you add Save and Open features to your program. For example, if you ran a program and entered some configuration settings, you could save those settings to a shelf file and then have the program load them the next time it is run.</p>
<p class="indent">Enter the following into the interactive shell:</p>
<p class="programs">&gt;&gt;&gt; <span class="codestrong1">import shelve</span><br/>
&gt;&gt;&gt; <span class="codestrong1">shelfFile = shelve.open('mydata')</span><br/>
&gt;&gt;&gt; <span class="codestrong1">cats = ['Zophie', 'Pooka', 'Simon']</span><br/>
&gt;&gt;&gt; <span class="codestrong1">shelfFile['cats'] = cats</span><br/>
&gt;&gt;&gt; <span class="codestrong1">shelfFile.close()</span></p>
<p class="indent">To read and write data using the <span class="literal">shelve</span> module, you first import <span class="literal">shelve</span>. Call <span class="literal">shelve.open()</span> and pass it a filename, and then store the returned shelf value in a variable. You can make changes to the shelf value as if it were a dictionary. When you&#8217;re done, call <span class="literal">close()</span> on the shelf value. Here, our shelf value is stored in <span class="literal">shelfFile</span>. We create a list <span class="literal">cats</span> and write <span class="literal">shelfFile['cats'] = cats</span> to store the list in <span class="literal">shelfFile</span> as a value associated with the key <span class="literal">'cats'</span> (like in a dictionary). Then we call <span class="literal">close()</span> on <span class="literal">shelfFile</span>. Note that as of Python 3.7, <span epub:type="pagebreak" id="page_220"/>you have to pass the <span class="literal">open()</span> shelf method filenames as strings. You can&#8217;t pass it <span class="literal">Path</span> object.</p>
<p class="indent">After running the previous code on Windows, you will see three new files in the current working directory: <em>mydata.bak</em>, <em>mydata.dat</em>, and <em>mydata.dir</em>. On macOS, only a single <em>mydata.db</em> file will be created.</p>
<p class="indent">These binary files contain the data you stored in your shelf. The format of these binary files is not important; you only need to know what the <span class="literal">shelve</span> module does, not how it does it. The module frees you from worrying about how to store your program&#8217;s data to a file.</p>
<p class="indent">Your programs can use the <span class="literal">shelve</span> module to later reopen and retrieve the data from these shelf files. Shelf values don&#8217;t have to be opened in read or write mode&#8212;they can do both once opened. Enter the following into the interactive shell:</p>
<p class="programs">&gt;&gt;&gt; <span class="codestrong1">shelfFile = shelve.open('mydata')</span><br/>
&gt;&gt;&gt; <span class="codestrong1">type(shelfFile)</span><br/>
&lt;class 'shelve.DbfilenameShelf'&gt;<br/>
&gt;&gt;&gt; <span class="codestrong1">shelfFile['cats']</span><br/>
['Zophie', 'Pooka', 'Simon']<br/>
&gt;&gt;&gt; <span class="codestrong1">shelfFile.close()</span></p>
<p class="indent">Here, we open the shelf files to check that our data was stored correctly. Entering <span class="literal">shelfFile['cats']</span> returns the same list that we stored earlier, so we know that the list is correctly stored, and we call <span class="literal">close()</span>.</p>
<p class="indent">Just like dictionaries, shelf values have <span class="literal">keys()</span> and <span class="literal">values()</span> methods that will return list-like values of the keys and values in the shelf. Since these methods return list-like values instead of true lists, you should pass them to the <span class="literal">list()</span> function to get them in list form. Enter the following into the interactive shell:</p>
<p class="programs">&gt;&gt;&gt; <span class="codestrong1">shelfFile = shelve.open('mydata')</span><br/>
&gt;&gt;&gt; <span class="codestrong1">list(shelfFile.keys())</span><br/>
['cats']<br/>
&gt;&gt;&gt; <span class="codestrong1">list(shelfFile.values())</span><br/>
[['Zophie', 'Pooka', 'Simon']]<br/>
&gt;&gt;&gt; <span class="codestrong1">shelfFile.close()</span></p>
<p class="indent">Plaintext is useful for creating files that you&#8217;ll read in a text editor such as Notepad or TextEdit, but if you want to save data from your Python programs, use the <span class="literal">shelve</span> module.</p>
<h3 class="h3" id="ch09lev1sec4"><strong>Saving Variables with the pprint.pformat() Function</strong></h3>
<p class="noindent">Recall from &#8220;<a href="ch05.xhtml#ch05lev1sec2">Pretty Printing</a>&#8221; on <a href="ch05.xhtml#page_118">page 118</a> that the <span class="literal">pprint.pprint()</span> function will &#8220;pretty print&#8221; the contents of a list or dictionary to the screen, while the <span class="literal">pprint.pformat()</span> function will return this same text as a string instead of printing it. Not only is this string formatted to be easy to read, but it is also syntactically correct Python code. Say you have a dictionary stored in a variable and you want to save this variable and its contents for future use. Using <span epub:type="pagebreak" id="page_221"/><span class="literal">pprint.pformat()</span> will give you a string that you can write to a <em>.py</em> file. This file will be your very own module that you can import whenever you want to use the variable stored in it.</p>
<p class="indent">For example, enter the following into the interactive shell:</p>
<p class="programs">&gt;&gt;&gt; <span class="codestrong1">import pprint</span><br/>
&gt;&gt;&gt; <span class="codestrong1">cats = [{'name': 'Zophie', 'desc': 'chubby'}, {'name': 'Pooka', 'desc': 'fluffy'}]</span><br/>
&gt;&gt;&gt; <span class="codestrong1">pprint.pformat(cats)</span><br/>
"[{'desc': 'chubby', 'name': 'Zophie'}, {'desc': 'fluffy', 'name': 'Pooka'}]"<br/>
&gt;&gt;&gt; <span class="codestrong1">fileObj = open('myCats.py', 'w')</span><br/>
&gt;&gt;&gt; <span class="codestrong1">fileObj.write('cats = ' + pprint.pformat(cats) + '\n')</span><br/>
83<br/>
&gt;&gt;&gt; <span class="codestrong1">fileObj.close()</span></p>
<p class="indent">Here, we import <span class="literal">pprint</span> to let us use <span class="literal">pprint.pformat()</span>. We have a list of dictionaries, stored in a variable <span class="literal">cats</span>. To keep the list in <span class="literal">cats</span> available even after we close the shell, we use <span class="literal">pprint.pformat()</span> to return it as a string. Once we have the data in <span class="literal">cats</span> as a string, it&#8217;s easy to write the string to a file, which we&#8217;ll call <em>myCats.py</em>.</p>
<p class="indent">The modules that an <span class="literal">import</span> statement imports are themselves just Python scripts. When the string from <span class="literal">pprint.pformat()</span> is saved to a <em>.py</em> file, the file is a module that can be imported just like any other.</p>
<p class="indent">And since Python scripts are themselves just text files with the <em>.py</em> file extension, your Python programs can even generate other Python programs. You can then import these files into scripts.</p>
<p class="programs">&gt;&gt;&gt; <span class="codestrong1">import myCats</span><br/>
&gt;&gt;&gt; <span class="codestrong1">myCats.cats</span><br/>
[{'name': 'Zophie', 'desc': 'chubby'}, {'name': 'Pooka', 'desc': 'fluffy'}]<br/>
&gt;&gt;&gt; <span class="codestrong1">myCats.cats[0]</span><br/>
{'name': 'Zophie', 'desc': 'chubby'}<br/>
&gt;&gt;&gt; <span class="codestrong1">myCats.cats[0]['name']</span><br/>
'Zophie'</p>
<p class="indent">The benefit of creating a <em>.py</em> file (as opposed to saving variables with the <span class="literal">shelve</span> module) is that because it is a text file, the contents of the file can be read and modified by anyone with a simple text editor. For most applications, however, saving data using the <span class="literal">shelve</span> module is the preferred way to save variables to a file. Only basic data types such as integers, floats, strings, lists, and dictionaries can be written to a file as simple text. <span class="literal">File</span> objects, for example, cannot be encoded as text.</p>
<h3 class="h3" id="ch09lev1sec5"><strong>Project: Generating Random Quiz Files</strong></h3>
<p class="noindent">Say you&#8217;re a geography teacher with 35 students in your class and you want to give a pop quiz on US state capitals. Alas, your class has a few bad eggs in it, and you can&#8217;t trust the students not to cheat. You&#8217;d like to randomize the <span epub:type="pagebreak" id="page_222"/>order of questions so that each quiz is unique, making it impossible for anyone to crib answers from anyone else. Of course, doing this by hand would be a lengthy and boring affair. Fortunately, you know some Python.</p>
<p class="indent">Here is what the program does:</p>
<ol>
<li class="noindent">Creates 35 different quizzes</li>
<li class="noindent">Creates 50 multiple-choice questions for each quiz, in random order</li>
<li class="noindent">Provides the correct answer and three random wrong answers for each question, in random order</li>
<li class="noindent">Writes the quizzes to 35 text files</li>
<li class="noindent">Writes the answer keys to 35 text files</li>
</ol>
<p class="indent">This means the code will need to do the following:</p>
<ol>
<li class="noindent">Store the states and their capitals in a dictionary</li>
<li class="noindent">Call <span class="literal">open()</span>, <span class="literal">write()</span>, and <span class="literal">close()</span> for the quiz and answer key text files</li>
<li class="noindent">Use <span class="literal">random.shuffle()</span> to randomize the order of the questions and multiple-choice options</li>
</ol>
<h4 class="h4" id="ch09lev2sec15"><strong><em>Step 1: Store the Quiz Data in a Dictionary</em></strong></h4>
<p class="noindent">The first step is to create a skeleton script and fill it with your quiz data. Create a file named <em>randomQuizGenerator.py</em>, and make it look like the following:</p>
<p class="programs">&#160;&#160;&#160;#! python3<br/>
&#160;&#160;&#160;# randomQuizGenerator.py - Creates quizzes with questions and answers in<br/>
&#160;&#160;&#160;# random order, along with the answer key.<br/>
<span class="ent">&#x278A;</span> import random<br/>
&#160;&#160;&#160;# The quiz data. Keys are states and values are their capitals.<br/>
<span class="ent">&#x278B;</span> capitals = {'Alabama': 'Montgomery', 'Alaska': 'Juneau', 'Arizona': 'Phoenix', <br/>
&#160;&#160;&#160;'Arkansas': 'Little Rock', 'California': 'Sacramento', 'Colorado': 'Denver',<br/>
&#160;&#160;&#160;'Connecticut': 'Hartford', 'Delaware': 'Dover', 'Florida': 'Tallahassee',<br/>
&#160;&#160;&#160;'Georgia': 'Atlanta', 'Hawaii': 'Honolulu', 'Idaho': 'Boise', 'Illinois':<br/>
&#160;&#160;&#160;'Springfield', 'Indiana': 'Indianapolis', 'Iowa': 'Des Moines', 'Kansas':<br/>
&#160;&#160;&#160;'Topeka', 'Kentucky': 'Frankfort', 'Louisiana': 'Baton Rouge', 'Maine':<br/>
&#160;&#160;&#160;'Augusta', 'Maryland': 'Annapolis', 'Massachusetts': 'Boston', 'Michigan':<br/>
&#160;&#160;&#160;'Lansing', 'Minnesota': 'Saint Paul', 'Mississippi': 'Jackson', 'Missouri':<br/>
&#160;&#160;&#160;'Jefferson City', 'Montana': 'Helena', 'Nebraska': 'Lincoln', 'Nevada':<br/>
&#160;&#160;&#160;'Carson City', 'New Hampshire': 'Concord', 'New Jersey': 'Trenton', 'New<br/>
&#160;&#160;&#160;Mexico': 'Santa Fe', 'New York': 'Albany',<br/>
&#160;&#160;&#160;'North Carolina': 'Raleigh', 'North Dakota': 'Bismarck', 'Ohio': 'Columbus', 'Oklahoma': 'Oklahoma City',<br/>
&#160;&#160;&#160;'Oregon': 'Salem', 'Pennsylvania': 'Harrisburg', 'Rhode Island': 'Providence',<br/>
&#160;&#160;&#160;'South Carolina': 'Columbia', 'South Dakota': 'Pierre', 'Tennessee':<br/>
&#160;&#160;&#160;'Nashville', 'Texas': 'Austin', 'Utah': 'Salt Lake City', 'Vermont':<br/>
&#160;&#160;&#160;'Montpelier', 'Virginia': 'Richmond', 'Washington': 'Olympia', 'West<br/>
&#160;&#160;&#160;Virginia': 'Charleston', 'Wisconsin': 'Madison', 'Wyoming': 'Cheyenne'}<br/><br/>
&#160;&#160;&#160;# Generate 35 quiz files.<br/>
<span epub:type="pagebreak" id="page_223"/><span class="ent">&#x278C;</span> for quizNum in range(35): <br/>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;# TODO: Create the quiz and answer key files.<br/><br/>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;# TODO: Write out the header for the quiz.<br/><br/>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;# TODO: Shuffle the order of the states.<br/><br/>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;# TODO: Loop through all 50 states, making a question for each.</p>
<p class="indent">Since this program will be randomly ordering the questions and answers, you&#8217;ll need to import the <span class="literal">random</span> module <span class="ent">&#x278A;</span> to make use of its functions. The <span class="literal">capitals</span> variable <span class="ent">&#x278B;</span> contains a dictionary with US states as keys and their capitals as values. And since you want to create 35 quizzes, the code that actually generates the quiz and answer key files (marked with <span class="literal">TODO</span> comments for now) will go inside a <span class="literal">for</span> loop that loops 35 times <span class="ent">&#x278C;</span>. (This number can be changed to generate any number of quiz files.)</p>
<h4 class="h4" id="ch09lev2sec16"><strong><em>Step 2: Create the Quiz File and Shuffle the Question Order</em></strong></h4>
<p class="noindent">Now it&#8217;s time to start filling in those <span class="literal">TODO</span>s.</p>
<p class="indent">The code in the loop will be repeated 35 times&#8212;once for each quiz&#8212;so you have to worry about only one quiz at a time within the loop. First you&#8217;ll create the actual quiz file. It needs to have a unique filename and should also have some kind of standard header in it, with places for the student to fill in a name, date, and class period. Then you&#8217;ll need to get a list of states in randomized order, which can be used later to create the questions and answers for the quiz.</p>
<p class="indent">Add the following lines of code to <em>randomQuizGenerator.py</em>:</p>
<p class="programs">#! python3<br/>
# randomQuizGenerator.py - Creates quizzes with questions and answers in<br/>
# random order, along with the answer key.<br/><br/>
--<span class="codeitalic1">snip</span>--<br/><br/>
# Generate 35 quiz files.<br/>
for quizNum in range(35):<br/>
&#160;&#160;&#160;&#160;<span class="codestrong1"># Create the quiz and answer key files.</span><br/>
<span class="codestrong1">&#160;&#160;</span><span class="ent">&#x278A;</span> <span class="codestrong1">quizFile = open(f'capitalsquiz{quizNum + 1}.txt', 'w')</span><br/>
<span class="codestrong1">&#160;&#160;</span><span class="ent">&#x278B;</span> <span class="codestrong1">answerKeyFile = open(f'capitalsquiz_answers{quizNum + 1}.txt', 'w')</span><br/>
&#160;&#160;&#160;&#160;&#160;<span class="codestrong1"># Write out the header for the quiz.</span><br/>
<span class="codestrong1">&#160;&#160;</span><span class="ent">&#x278C;</span> <span class="codestrong1">quizFile.write('Name:\n\nDate:\n\nPeriod:\n\n')</span><br/>
<span class="codestrong1">&#160;&#160;&#160;&#160;&#160;quizFile.write((' ' * 20) + f'State Capitals Quiz (Form{quizNum + 1})')</span><br/>
<span class="codestrong1">&#160;&#160;&#160;&#160;&#160;quizFile.write('\n\n')</span><br/><br/>
&#160;&#160;&#160;&#160;&#160;<span class="codestrong1"># Shuffle the order of the states.</span><br/>
<span class="codestrong1">&#160;&#160;&#160;&#160;&#160;states = list(capitals.keys())</span><br/>
<span class="codestrong1">&#160;&#160;</span><span class="ent">&#x278D;</span> <span class="codestrong1">random.shuffle(states)</span><br/><br/>
&#160;&#160;&#160;&#160;&#160;# TODO: Loop through all 50 states, making a question for each.</p>
<p class="indent"><span epub:type="pagebreak" id="page_224"/>The filenames for the quizzes will be <em>capitalsquiz&lt;N&gt;.txt</em>, where <em>&lt;N&gt;</em> is a unique number for the quiz that comes from <span class="literal">quizNum</span>, the <span class="literal">for</span> loop&#8217;s counter. The answer key for <em>capitalsquiz&lt;N&gt;.txt</em> will be stored in a text file named <em>capitalsquiz_answers&lt;N&gt;.txt</em>. Each time through the loop, the <span class="literal">{quizNum + 1}</span> placeholder in <span class="literal">f'capitalsquiz{quizNum + 1}.txt'</span> and <span class="literal">f'capitalsquiz_answers{quizNum + 1}.txt'</span> will be replaced by the unique number, so the first quiz and answer key created will be <em>capitalsquiz1.txt</em> and <em>capitalsquiz_answers1.txt</em>. These files will be created with calls to the <span class="literal">open()</span> function at <span class="ent">&#x278A;</span> and <span class="ent">&#x278B;</span>, with <span class="literal">'w'</span> as the second argument to open them in write mode.</p>
<p class="indent">The <span class="literal">write()</span> statements at <span class="ent">&#x278C;</span> create a quiz header for the student to fill out. Finally, a randomized list of US states is created with the help of the <span class="literal">random.shuffle()</span> function <span class="ent">&#x278D;</span>, which randomly reorders the values in any list that is passed to it.</p>
<h4 class="h4" id="ch09lev2sec17"><strong><em>Step 3: Create the Answer Options</em></strong></h4>
<p class="noindent">Now you need to generate the answer options for each question, which will be multiple choice from A to D. You&#8217;ll need to create another <span class="literal">for</span> loop&#8212;this one to generate the content for each of the 50 questions on the quiz. Then there will be a third <span class="literal">for</span> loop nested inside to generate the multiple-choice options for each question. Make your code look like the following:</p>
<p class="programs">#! python3<br/>
# randomQuizGenerator.py - Creates quizzes with questions and answers in<br/>
# random order, along with the answer key.<br/><br/>
--<span class="codeitalic1">snip</span>--<br/><br/>
&#160;&#160;&#160;&#160;<span class="codestrong1"># Loop through all 50 states, making a question for each.</span><br/>
<span class="codestrong1">&#160;&#160;&#160;&#160;for questionNum in range(50):</span><br/><br/>
<span class="codestrong1">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;# Get right and wrong answers.</span><br/>
<span class="codestrong1">&#160;&#160;&#160;&#160;&#160;&#160;</span><span class="ent">&#x278A;</span> <span class="codestrong1">correctAnswer = capitals[states[questionNum]]</span><br/>
<span class="codestrong1">&#160;&#160;&#160;&#160;&#160;&#160;</span><span class="ent">&#x278B;</span> <span class="codestrong1">wrongAnswers = list(capitals.values())</span><br/>
<span class="codestrong1">&#160;&#160;&#160;&#160;&#160;&#160;</span><span class="ent">&#x278C;</span> <span class="codestrong1">del wrongAnswers[wrongAnswers.index(correctAnswer)]</span><br/>
<span class="codestrong1">&#160;&#160;&#160;&#160;&#160;&#160;</span><span class="ent">&#x278D;</span> <span class="codestrong1">wrongAnswers = random.sample(wrongAnswers, 3)</span><br/>
<span class="codestrong1">&#160;&#160;&#160;&#160;&#160;&#160;</span><span class="ent">&#x278E;</span> <span class="codestrong1">answerOptions = wrongAnswers + [correctAnswer]</span><br/>
<span class="codestrong1">&#160;&#160;&#160;&#160;&#160;&#160;</span><span class="ent">&#x278F;</span> <span class="codestrong1">random.shuffle(answerOptions)</span><br/><br/>
<span class="codestrong1">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;# TODO: Write the question and answer options to the quiz file.</span><br/><br/>
<span class="codestrong1">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;# TODO: Write the answer key to a file.</span></p>
<p class="indent">The correct answer is easy to get&#8212;it&#8217;s stored as a value in the <span class="literal">capitals</span> dictionary <span class="ent">&#x278A;</span>. This loop will loop through the states in the shuffled <span class="literal">states</span> list, from <span class="literal">states[0]</span> to <span class="literal">states[49]</span>, find each state in <span class="literal">capitals</span>, and store that state&#8217;s corresponding capital in <span class="literal">correctAnswer</span>.</p>
<p class="indent">The list of possible wrong answers is trickier. You can get it by duplicating <em>all</em> the values in the <span class="literal">capitals</span> dictionary <span class="ent">&#x278B;</span>, deleting the correct answer <span class="ent">&#x278C;</span>, and selecting three random values from this list <span class="ent">&#x278D;</span>. The <span class="literal">random.sample()</span> function makes it easy to do this selection. Its first argument is the list you want <span epub:type="pagebreak" id="page_225"/>to select from; the second argument is the number of values you want to select. The full list of answer options is the combination of these three wrong answers with the correct answers <span class="ent">&#x278E;</span>. Finally, the answers need to be randomized <span class="ent">&#x278F;</span> so that the correct response isn&#8217;t always choice D.</p>
<h4 class="h4" id="ch09lev2sec18"><strong><em>Step 4: Write Content to the Quiz and Answer Key Files</em></strong></h4>
<p class="noindent">All that is left is to write the question to the quiz file and the answer to the answer key file. Make your code look like the following:</p>
<p class="programs">#! python3<br/>
# randomQuizGenerator.py - Creates quizzes with questions and answers in<br/>
# random order, along with the answer key.<br/><br/>
--<span class="codeitalic1">snip</span>--<br/><br/>
&#160;&#160;&#160;&#160;# Loop through all 50 states, making a question for each.<br/>
&#160;&#160;&#160;&#160;for questionNum in range(50):<br/>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;--<span class="codeitalic1">snip</span>--<br/><br/>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<span class="codestrong1"># Write the question and the answer options to the quiz file.</span><br/>
<span class="codestrong1">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;quizFile.write(f'{questionNum + 1}. What is the capital of</span><br/>
<span class="codestrong1">{states[questionNum]}?\n')</span><br/>
<span class="codestrong1">&#160;&#160;&#160;&#160;&#160;&#160;</span><span class="ent">&#x278A;</span> <span class="codestrong1">for i in range(4):</span><br/>
<span class="codestrong1">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;</span><span class="ent">&#x278B;</span> <span class="codestrong1">quizFile.write(f"&#160;&#160;&#160;&#160;{'ABCD'[i]}. { answerOptions[i]}\n")</span><br/>
<span class="codestrong1">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;quizFile.write('\n')</span><br/><br/>
<span class="codestrong1">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;# Write the answer key to a file.</span><br/>
<span class="codestrong1">&#160;&#160;&#160;&#160;&#160;&#160;</span><span class="ent">&#x278C;</span> <span class="codestrong1">answerKeyFile.write(f"{questionNum + 1}.</span><br/>
<span class="codestrong1">{'ABCD'[answerOptions.index(correctAnswer)]}")</span><br/>
<span class="codestrong1">&#160;&#160;&#160;&#160;&#160;quizFile.close()</span><br/>
<span class="codestrong1">&#160;&#160;&#160;&#160;&#160;answerKeyFile.close()</span></p>
<p class="indent">A <span class="literal">for</span> loop that goes through integers <span class="literal">0</span> to <span class="literal">3</span> will write the answer options in the <span class="literal">answerOptions</span> list <span class="ent">&#x278A;</span>. The expression <span class="literal">'ABCD'[i]</span> at <span class="ent">&#x278B;</span> treats the string <span class="literal">'ABCD'</span> as an array and will evaluate to <span class="literal">'A'</span>,<span class="literal">'B'</span>, <span class="literal">'C'</span>, and then <span class="literal">'D'</span> on each respective iteration through the loop.</p>
<p class="indent">In the final line <span class="ent">&#x278C;</span>, the expression <span class="literal">answerOptions.index(correctAnswer)</span> will find the integer index of the correct answer in the randomly ordered answer options, and <span class="literal">'ABCD'[answerOptions.index(correctAnswer)]</span> will evaluate to the correct answer&#8217;s letter to be written to the answer key file.</p>
<p class="indent">After you run the program, this is how your <em>capitalsquiz1.txt</em> file will look, though of course your questions and answer options may be different from those shown here, depending on the outcome of your <span class="literal">random.shuffle()</span> calls:</p>
<p class="programs">Name:<br/><br/>
Date:<br/><br/>
Period:<br/><br/>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;State Capitals Quiz (Form 1)<br/><br/>
<span epub:type="pagebreak" id="page_226"/>1. What is the capital of West Virginia?<br/>
&#160;&#160;&#160;&#160;A. Hartford<br/>
&#160;&#160;&#160;&#160;B. Santa Fe<br/>
&#160;&#160;&#160;&#160;C. Harrisburg<br/>
&#160;&#160;&#160;&#160;D. Charleston<br/><br/>
2. What is the capital of Colorado?<br/>
&#160;&#160;&#160;&#160;A. Raleigh<br/>
&#160;&#160;&#160;&#160;B. Harrisburg<br/>
&#160;&#160;&#160;&#160;C. Denver<br/>
&#160;&#160;&#160;&#160;D. Lincoln<br/><br/>
--<span class="codeitalic1">snip</span>--</p>
<p class="indent">The corresponding <em>capitalsquiz_answers1.txt</em> text file will look like this:</p>
<p class="programs">1. D<br/>
2. C<br/>
3. A<br/>
4. C<br/>
--<span class="codeitalic1">snip</span>--</p>
<h3 class="h3" id="ch09lev1sec6"><strong>Project: Updatable Multi-Clipboard</strong></h3>
<p class="noindent">Let&#8217;s rewrite the &#8220;multi-clipboard&#8221; program from <a href="ch06.xhtml#ch06">Chapter 6</a> so that it uses the <span class="literal">shelve</span> module. The user will now be able to save new strings to load to the clipboard without having to modify the source code. We&#8217;ll name this new program <em>mcb.pyw</em> (since &#8220;mcb&#8221; is shorter to type than &#8220;multi-clipboard&#8221;). The <em>.pyw</em> extension means that Python won&#8217;t show a Terminal window when it runs this program. (See <a href="app02.xhtml#app02">Appendix B</a> for more details.)</p>
<p class="indent">The program will save each piece of clipboard text under a keyword. For example, when you run <span class="literal">py mcb.pyw save spam</span>, the current contents of the clipboard will be saved with the keyword <em>spam</em>. This text can later be loaded to the clipboard again by running <span class="literal">py mcb.pyw spam</span>. And if the user forgets what keywords they have, they can run <span class="literal">py mcb.pyw list</span> to copy a list of all keywords to the clipboard.</p>
<p class="indent">Here&#8217;s what the program does:</p>
<ol>
<li class="noindent">The command line argument for the keyword is checked.</li>
<li class="noindent">If the argument is <span class="literal">save</span>, then the clipboard contents are saved to the keyword.</li>
<li class="noindent">If the argument is <span class="literal">list</span>, then all the keywords are copied to the clipboard.</li>
<li class="noindent">Otherwise, the text for the keyword is copied to the clipboard.</li>
</ol>
<p class="indent">This means the code will need to do the following:</p>
<ol>
<li class="noindent">Read the command line arguments from <span class="literal">sys.argv</span>.</li>
<li class="noindent">Read and write to the clipboard.</li>
<li class="noindent">Save and load to a shelf file.</li>
</ol>
<p class="indent"><span epub:type="pagebreak" id="page_227"/>If you use Windows, you can easily run this script from the Run... window by creating a batch file named <em>mcb.bat</em> with the following content:</p>
<p class="programs">@pyw.exe C:\Python34\mcb.pyw %*</p>
<h4 class="h4" id="ch09lev2sec19"><strong><em>Step 1: Comments and Shelf Setup</em></strong></h4>
<p class="noindent">Let&#8217;s start by making a skeleton script with some comments and basic setup. Make your code look like the following:</p>
<p class="programs">&#160;&#160;&#160;#! python3<br/>
&#160;&#160;&#160;# mcb.pyw - Saves and loads pieces of text to the clipboard.<br/>
<span class="ent">&#x278A;</span> # Usage: py.exe mcb.pyw save &lt;keyword&gt; - Saves clipboard to keyword.<br/>
&#160;&#160;&#160;#&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;py.exe mcb.pyw &lt;keyword&gt; - Loads keyword to clipboard.<br/>
&#160;&#160;&#160;#&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;py.exe mcb.pyw list - Loads all keywords to clipboard.<br/><br/>
<span class="ent">&#x278B;</span> import shelve, pyperclip, sys<br/><br/>
<span class="ent">&#x278C;</span> mcbShelf = shelve.open('mcb')<br/><br/>
&#160;&#160;&#160;# TODO: Save clipboard content.<br/><br/>
&#160;&#160;&#160;# TODO: List keywords and load content.<br/><br/>
&#160;&#160;&#160;mcbShelf.close()</p>
<p class="indent">It&#8217;s common practice to put general usage information in comments at the top of the file <span class="ent">&#x278A;</span>. If you ever forget how to run your script, you can always look at these comments for a reminder. Then you import your modules <span class="ent">&#x278B;</span>. Copying and pasting will require the <span class="literal">pyperclip</span> module, and reading the command line arguments will require the <span class="literal">sys</span> module. The <span class="literal">shelve</span> module will also come in handy: Whenever the user wants to save a new piece of clipboard text, you&#8217;ll save it to a shelf file. Then, when the user wants to paste the text back to their clipboard, you&#8217;ll open the shelf file and load it back into your program. The shelf file will be named with the prefix <em>mcb</em> <span class="ent">&#x278C;</span>.</p>
<h4 class="h4" id="ch09lev2sec20"><strong><em>Step 2: Save Clipboard Content with a Keyword</em></strong></h4>
<p class="noindent">The program does different things depending on whether the user wants to save text to a keyword, load text into the clipboard, or list all the existing keywords. Let&#8217;s deal with that first case. Make your code look like the following:</p>
<p class="programs">&#160;&#160;&#160;#! python3<br/>
&#160;&#160;&#160;# mcb.pyw - Saves and loads pieces of text to the clipboard.<br/>
&#160;&#160;&#160;--<span class="codeitalic1">snip</span>--<br/><br/>
&#160;&#160;&#160;<span class="codestrong1"># Save clipboard content.</span><br/>
<span class="ent">&#x278A;</span> <span class="codestrong1">if len(sys.argv) == 3 and sys.argv[1].lower() == 'save':</span><br/>
<span class="codestrong1">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;</span><span class="ent">&#x278B;</span> <span class="codestrong1">mcbShelf[sys.argv[2]] = pyperclip.paste()</span><br/>
&#160;&#160;&#160;<span class="codestrong1">elif len(sys.argv) == 2:</span><br/>
<span epub:type="pagebreak" id="page_228"/>&#160;&#160;&#160;<span class="ent">&#x278C;</span> # TODO: List keywords and load content.<br/><br/>
mcbShelf.close()</p>
<p class="indent">If the first command line argument (which will always be at index <span class="literal">1</span> of the <span class="literal">sys.argv</span> list) is <span class="literal">'save'</span> <span class="ent">&#x278A;</span>, the second command line argument is the keyword for the current content of the clipboard. The keyword will be used as the key for <span class="literal">mcbShelf</span>, and the value will be the text currently on the clipboard <span class="ent">&#x278B;</span>.</p>
<p class="indent">If there is only one command line argument, you will assume it is either <span class="literal">'list'</span> or a keyword to load content onto the clipboard. You will implement that code later. For now, just put a <span class="literal">TODO</span> comment there <span class="ent">&#x278C;</span>.</p>
<h4 class="h4" id="ch09lev2sec21"><strong><em>Step 3: List Keywords and Load a Keyword&#8217;s Content</em></strong></h4>
<p class="noindent">Finally, let&#8217;s implement the two remaining cases: the user wants to load clipboard text in from a keyword, or they want a list of all available keywords. Make your code look like the following:</p>
<p class="programs">#! python3<br/>
# mcb.pyw - Saves and loads pieces of text to the clipboard.<br/>
--<span class="codeitalic1">snip</span>--<br/><br/>
# Save clipboard content.<br/>
if len(sys.argv) == 3 and sys.argv[1].lower() == 'save':<br/>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;mcbShelf[sys.argv[2]] = pyperclip.paste()<br/>
elif len(sys.argv) == 2:<br/>
<span class="codestrong1">&#160;&#160;&#160;&#160;&#160;# List keywords and load content.</span><br/>
<span class="codestrong1">&#160;&#160;</span><span class="ent">&#x278A;</span> <span class="codestrong1">if sys.argv[1].lower() == 'list':</span><br/>
<span class="codestrong1">&#160;&#160;&#160;&#160;&#160;&#160;</span><span class="ent">&#x278B;</span> <span class="codestrong1">pyperclip.copy(str(list(mcbShelf.keys())))</span><br/>
<span class="codestrong1">&#160;&#160;&#160;&#160;&#160;elif sys.argv[1] in mcbShelf:</span><br/>
<span class="codestrong1">&#160;&#160;&#160;&#160;&#160;&#160;</span><span class="ent">&#x278C;</span> <span class="codestrong1">pyperclip.copy(mcbShelf[sys.argv[1]])</span><br/><br/>
mcbShelf.close()</p>
<p class="indent">If there is only one command line argument, first let&#8217;s check whether it&#8217;s <span class="literal">'list'</span> <span class="ent">&#x278A;</span>. If so, a string representation of the list of shelf keys will be copied to the clipboard <span class="ent">&#x278B;</span>. The user can paste this list into an open text editor to read it.</p>
<p class="indent">Otherwise, you can assume the command line argument is a keyword. If this keyword exists in the <span class="literal">mcbShelf</span> shelf as a key, you can load the value onto the clipboard <span class="ent">&#x278C;</span>.</p>
<p class="indent">And that&#8217;s it! Launching this program has different steps depending on what operating system your computer uses. See <a href="app02.xhtml#app02">Appendix B</a> for details.</p>
<p class="indent">Recall the password locker program you created in <a href="ch06.xhtml#ch06">Chapter 6</a> that stored the passwords in a dictionary. Updating the passwords required changing the source code of the program. This isn&#8217;t ideal, because average users don&#8217;t feel comfortable changing source code to update their software. Also, every time you modify the source code to a program, you run the risk of accidentally introducing new bugs. By storing the data for a program in <span epub:type="pagebreak" id="page_229"/>a different place than the code, you can make your programs easier for others to use and more resistant to bugs.</p>
<h3 class="h3" id="ch09lev1sec7"><strong>Summary</strong></h3>
<p class="noindent">Files are organized into folders (also called directories), and a path describes the location of a file. Every program running on your computer has a current working directory, which allows you to specify file paths relative to the current location instead of always typing the full (or absolute) path. The <span class="literal">pathlib</span> and <span class="literal">os.path</span> modules have many functions for manipulating file paths.</p>
<p class="indent">Your programs can also directly interact with the contents of text files. The <span class="literal">open()</span> function can open these files to read in their contents as one large string (with the <span class="literal">read()</span> method) or as a list of strings (with the <span class="literal">readlines()</span> method). The <span class="literal">open()</span> function can open files in write or append mode to create new text files or add to existing text files, respectively.</p>
<p class="indent">In previous chapters, you used the clipboard as a way of getting large amounts of text into a program, rather than typing it all in. Now you can have your programs read files directly from the hard drive, which is a big improvement, since files are much less volatile than the clipboard.</p>
<p class="indent">In the next chapter, you will learn how to handle the files themselves, by copying them, deleting them, renaming them, moving them, and more.</p>
<h3 class="h3" id="ch09lev1sec8"><strong>Practice Questions</strong></h3>
<p class="question"><a id="ch09que1" href="app03.xhtml#ch09ans1">1</a>. What is a relative path relative to?</p>
<p class="question"><a id="ch09que2" href="app03.xhtml#ch09ans2">2</a>. What does an absolute path start with?</p>
<p class="question"><a id="ch09que3" href="app03.xhtml#ch09ans3">3</a>. What does <span class="literal">Path('C:/Users') / 'Al'</span> evaluate to on Windows?</p>
<p class="question"><a id="ch09que4" href="app03.xhtml#ch09ans4">4</a>. What does <span class="literal">'C:/Users' / 'Al'</span> evaluate to on Windows?</p>
<p class="question"><a id="ch09que5" href="app03.xhtml#ch09ans5">5</a>. What do the <span class="literal">os.getcwd()</span> and <span class="literal">os.chdir()</span> functions do?</p>
<p class="question"><a id="ch09que6" href="app03.xhtml#ch09ans6">6</a>. What are the <span class="literal">.</span> and <span class="literal">..</span> folders?</p>
<p class="question"><a id="ch09que7" href="app03.xhtml#ch09ans7">7</a>. In <em>C:\bacon\eggs\spam.txt</em>, which part is the dir name, and which part is the base name?</p>
<p class="question"><a id="ch09que8" href="app03.xhtml#ch09ans8">8</a>. What are the three &#8220;mode&#8221; arguments that can be passed to the <span class="literal">open()</span> function?</p>
<p class="question"><a id="ch09que9" href="app03.xhtml#ch09ans9">9</a>. What happens if an existing file is opened in write mode?</p>
<p class="question1"><a id="ch09que10" href="app03.xhtml#ch09ans10">10</a>. What is the difference between the <span class="literal">read()</span> and <span class="literal">readlines()</span> methods?</p>
<p class="question1"><a id="ch09que11" href="app03.xhtml#ch09ans11">11</a>. What data structure does a shelf value resemble?</p>
<h3 class="h3" id="ch09lev1sec9"><strong>Practice Projects</strong></h3>
<p class="noindent">For practice, design and write the following programs.</p>
<h4 class="h4" id="ch09lev2sec22"><span epub:type="pagebreak" id="page_230"/><strong><em>Extending the Multi-Clipboard</em></strong></h4>
<p class="noindent">Extend the multi-clipboard program in this chapter so that it has a <span class="literal">delete &lt;keyword&gt;</span> command line argument that will delete a keyword from the shelf. Then add a <span class="literal">delete</span> command line argument that will delete <em>all</em> keywords.</p>
<h4 class="h4" id="ch09lev2sec23"><strong><em>Mad Libs</em></strong></h4>
<p class="noindent">Create a Mad Libs program that reads in text files and lets the user add their own text anywhere the word <em>ADJECTIVE</em>, <em>NOUN</em>, <em>ADVERB</em>, or <em>VERB</em> appears in the text file. For example, a text file may look like this:</p>
<p class="programs">The ADJECTIVE panda walked to the NOUN and then VERB. A nearby NOUN was<br/>
unaffected by these events.</p>
<p class="indent">The program would find these occurrences and prompt the user to replace them.</p>
<p class="programs">Enter an adjective:<br/>
<span class="codestrong1">silly</span><br/>
Enter a noun:<br/>
<span class="codestrong1">chandelier</span><br/>
Enter a verb:<br/>
<span class="codestrong1">screamed</span><br/>
Enter a noun:<br/>
<span class="codestrong1">pickup truck</span></p>
<p class="indent">The following text file would then be created:</p>
<p class="programs">The silly panda walked to the chandelier and then screamed. A nearby pickup<br/>truck was unaffected by these events.</p>
<p class="indent">The results should be printed to the screen and saved to a new text file.</p>
<h4 class="h4" id="ch09lev2sec24"><strong><em>Regex Search</em></strong></h4>
<p class="noindent">Write a program that opens all .<em>txt</em> files in a folder and searches for any line that matches a user-supplied regular expression. The results should be printed to the screen.</p>
</body>
</html>
