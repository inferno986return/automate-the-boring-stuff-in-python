<?xml version="1.0" encoding="UTF-8"?>
<html xml:lang="en-us" lang="en-us" xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xmlns:ns="http://www.w3.org/2001/10/synthesis">
<head>
<title>Automate the Boring Stuff with Python: Practical Programming for Total Beginners, 2nd Edition</title>
<link rel="stylesheet" type="text/css" href="../styles/9781593279936.css"/>
</head>
<body>
<h2 class="h2" id="ch13"><span epub:type="pagebreak" id="page_301"/><strong><span class="big">13</span><br/>WORKING WITH EXCEL SPREADSHEETS</strong></h2>
<div class="image1"><img src="../images/13fig00.jpg" alt="Image"/></div>
<p class="noindent">Although we don&#8217;t often think of spreadsheets as programming tools, almost everyone uses them to organize information into two-dimensional data structures, perform calculations with formulas, and produce output as charts. In the next two chapters, we&#8217;ll integrate Python into two popular spreadsheet applications: Microsoft Excel and Google Sheets.</p>
<p class="indent">Excel is a popular and powerful spreadsheet application for Windows. The <span class="literal">openpyxl</span> module allows your Python programs to read and modify Excel spreadsheet files. For example, you might have the boring task of copying certain data from one spreadsheet and pasting it into another one. Or you might have to go through thousands of rows and pick out just a handful of them to make small edits based on some criteria. Or you might have to look through hundreds of spreadsheets of department budgets, searching for any that are in the red. These are exactly the sort of boring, mindless spreadsheet tasks that Python can do for you.</p>
<p class="indent"><span epub:type="pagebreak" id="page_302"/>Although Excel is proprietary software from Microsoft, there are free alternatives that run on Windows, macOS, and Linux. Both LibreOffice Calc and OpenOffice Calc work with Excel&#8217;s <em>.xlsx</em> file format for spreadsheets, which means the <span class="literal">openpyxl</span> module can work on spreadsheets from these applications as well. You can download the software from <em><a href="https://www.libreoffice.org/">https://www.libreoffice.org/</a></em> and <em><a href="https://www.openoffice.org/">https://www.openoffice.org/</a></em>, respectively. Even if you already have Excel installed on your computer, you may find these programs easier to use. The screenshots in this chapter, however, are all from Excel 2010 on Windows 10.</p>
<h3 class="h3" id="ch13lev1sec1"><strong>Excel Documents</strong></h3>
<p class="noindent">First, let&#8217;s go over some basic definitions: an Excel spreadsheet document is called a <em>workbook</em>. A single workbook is saved in a file with the <em>.xlsx</em> extension. Each workbook can contain multiple <em>sheets</em> (also called <em>worksheets</em>). The sheet the user is currently viewing (or last viewed before closing Excel) is called the <em>active sheet</em>.</p>
<p class="indent">Each sheet has <em>columns</em> (addressed by letters starting at <em>A</em>) and <em>rows</em> (addressed by numbers starting at 1). A box at a particular column and row is called a <em>cell</em>. Each cell can contain a number or text value. The grid of cells with data makes up a sheet.</p>
<h3 class="h3" id="ch13lev1sec2"><strong>Installing the openpyxl Module</strong></h3>
<p class="noindent">Python does not come with OpenPyXL, so you&#8217;ll have to install it. Follow the instructions for installing third-party modules in <a href="app01.xhtml#app01">Appendix A</a>; the name of the module is <span class="literal">openpyxl</span>.</p>
<p class="indent">This book uses version 2.6.2 of OpenPyXL. It&#8217;s important that you install this version by running <span class="literal">pip install --user -U openpyxl==2.6.2</span> because newer versions of OpenPyXL are incompatible with the information in this book. To test whether it is installed correctly, enter the following into the interactive shell:</p>
<p class="programs">&gt;&gt;&gt; <span class="codestrong1">import openpyxl</span></p>
<p class="indent">If the module was correctly installed, this should produce no error messages. Remember to import the <span class="literal">openpyxl</span> module before running the interactive shell examples in this chapter, or you&#8217;ll get a <span class="literal">NameError: name 'openpyxl' is not defined</span> error.</p>
<p class="indent">You can find the full documentation for OpenPyXL at <em><a href="https://openpyxl.readthedocs.org/">https://openpyxl.readthedocs.org/</a></em>.</p>
<h3 class="h3" id="ch13lev1sec3"><strong>Reading Excel Documents</strong></h3>
<p class="noindent">The examples in this chapter will use a spreadsheet named <em>example.xlsx</em> stored in the root folder. You can either create the spreadsheet yourself or download it from <em><a href="https://nostarch.com/automatestuff2/">https://nostarch.com/automatestuff2/</a></em>. <a href="ch13.xhtml#ch13fig01">Figure 13-1</a> shows the <span epub:type="pagebreak" id="page_303"/>tabs for the three default sheets named <em>Sheet1</em>, <em>Sheet2</em>, and <em>Sheet3</em> that Excel automatically provides for new workbooks. (The number of default sheets created may vary between operating systems and spreadsheet programs.)</p>
<div class="image"><a id="ch13fig01"/><img src="../images/13fig01.jpg" alt="image"/></div>
<p class="figcap"><em>Figure 13-1: The tabs for a workbook&#8217;s sheets are in the lower-left corner of Excel.</em></p>
<p class="indent">Sheet 1 in the example file should look like <a href="ch13.xhtml#ch13tab01">Table 13-1</a>. (If you didn&#8217;t download <em>example.xlsx</em> from the website, you should enter this data into the sheet yourself.)</p>
<p class="tabcap" id="ch13tab01"><strong>Table 13-1:</strong> The <em>example.xlsx</em> Spreadsheet</p>
<table class="topbot-d">
<colgroup>
<col style="width:25%"/>
<col style="width:25%"/>
<col style="width:25%"/>
<col style="width:25%"/>
</colgroup>
<tbody>
<tr>
<td style="vertical-align: top;" class="table-h"/>
<td style="vertical-align: top;" class="table-h"><p class="tab_th"><strong>A</strong></p></td>
<td style="vertical-align: top;" class="table-h"><p class="tab_th"><strong>B</strong></p></td>
<td style="vertical-align: top;" class="table-h"><p class="tab_th"><strong>C</strong></p></td>
</tr>
<tr>
<td style="vertical-align: top;" class="table-b"><p class="taba"><strong>1</strong></p></td>
<td style="vertical-align: top;" class="table-b"><p class="taba">4/5/2015&#160;&#160;1:34:02 PM</p></td>
<td style="vertical-align: top;" class="table-b"><p class="taba">Apples</p></td>
<td style="vertical-align: top;" class="table-b"><p class="taba">73</p></td>
</tr>
<tr>
<td style="vertical-align: top;" class="table-v"><p class="taba"><strong>2</strong></p></td>
<td style="vertical-align: top;" class="table-v"><p class="taba">4/5/2015&#160;&#160;3:41:23 AM</p></td>
<td style="vertical-align: top;" class="table-v"><p class="taba">Cherries</p></td>
<td style="vertical-align: top;" class="table-v"><p class="taba">85</p></td>
</tr>
<tr>
<td style="vertical-align: top;" class="table-b"><p class="taba"><strong>3</strong></p></td>
<td style="vertical-align: top;" class="table-b"><p class="taba">4/6/2015&#160;&#160;12:46:51 PM</p></td>
<td style="vertical-align: top;" class="table-b"><p class="taba">Pears</p></td>
<td style="vertical-align: top;" class="table-b"><p class="taba">14</p></td>
</tr>
<tr>
<td style="vertical-align: top;" class="table-v"><p class="taba"><strong>4</strong></p></td>
<td style="vertical-align: top;" class="table-v"><p class="taba">4/8/2015&#160;&#160;8:59:43 AM</p></td>
<td style="vertical-align: top;" class="table-v"><p class="taba">Oranges</p></td>
<td style="vertical-align: top;" class="table-v"><p class="taba">52</p></td>
</tr>
<tr>
<td style="vertical-align: top;" class="table-b"><p class="taba"><strong>5</strong></p></td>
<td style="vertical-align: top;" class="table-b"><p class="taba">4/10/2015&#160;&#160;2:07:00 AM</p></td>
<td style="vertical-align: top;" class="table-b"><p class="taba">Apples</p></td>
<td style="vertical-align: top;" class="table-b"><p class="taba">152</p></td>
</tr>
<tr>
<td style="vertical-align: top;" class="table-v"><p class="taba"><strong>6</strong></p></td>
<td style="vertical-align: top;" class="table-v"><p class="taba">4/10/2015&#160;&#160;6:10:37 PM</p></td>
<td style="vertical-align: top;" class="table-v"><p class="taba">Bananas</p></td>
<td style="vertical-align: top;" class="table-v"><p class="taba">23</p></td>
</tr>
<tr>
<td style="vertical-align: top;" class="table-ba"><p class="taba"><strong>7</strong></p></td>
<td style="vertical-align: top;" class="table-ba"><p class="taba">4/10/2015&#160;&#160;2:40:46 AM</p></td>
<td style="vertical-align: top;" class="table-ba"><p class="taba">Strawberries</p></td>
<td style="vertical-align: top;" class="table-ba"><p class="taba">98</p></td>
</tr>
</tbody>
</table>
<p class="indent">Now that we have our example spreadsheet, let&#8217;s see how we can manipulate it with the <span class="literal">openpyxl</span> module.</p>
<h4 class="h4" id="ch13lev2sec1"><strong><em>Opening Excel Documents with OpenPyXL</em></strong></h4>
<p class="noindent">Once you&#8217;ve imported the <span class="literal">openpyxl</span> module, you&#8217;ll be able to use the <span class="literal">openpyxl.load_workbook()</span> function. Enter the following into the interactive shell:</p>
<p class="programs">&gt;&gt;&gt; <span class="codestrong1">import openpyxl</span><br/>
&gt;&gt;&gt; <span class="codestrong1">wb = openpyxl.load_workbook('example.xlsx')</span><br/>
&gt;&gt;&gt; <span class="codestrong1">type(wb)</span><br/>
&lt;class 'openpyxl.workbook.workbook.Workbook'&gt;</p>
<p class="indent">The <span class="literal">openpyxl.load_workbook()</span> function takes in the filename and returns a value of the <span class="literal">workbook</span> data type. This <span class="literal">Workbook</span> object represents the Excel file, a bit like how a <span class="literal">File</span> object represents an opened text file.</p>
<p class="indent">Remember that <em>example.xlsx</em> needs to be in the current working directory in order for you to work with it. You can find out what the current working directory is by importing <span class="literal">os</span> and using <span class="literal">os.getcwd()</span>, and you can change the current working directory using <span class="literal">os.chdir()</span>.</p>
<h4 class="h4" id="ch13lev2sec2"><span epub:type="pagebreak" id="page_304"/><strong><em>Getting Sheets from the Workbook</em></strong></h4>
<p class="noindent">You can get a list of all the sheet names in the workbook by accessing the <span class="literal">sheetnames</span> attribute. Enter the following into the interactive shell:</p>
<p class="programs">&gt;&gt;&gt; <span class="codestrong1">import openpyxl</span><br/>
&gt;&gt;&gt; <span class="codestrong1">wb = openpyxl.load_workbook('example.xlsx')</span><br/>
&gt;&gt;&gt; <span class="codestrong1">wb.sheetnames</span> # The workbook's sheets' names.<br/>
['Sheet1', 'Sheet2', 'Sheet3']<br/>
&gt;&gt;&gt; <span class="codestrong1">sheet = wb['Sheet3']</span> # Get a sheet from the workbook.<br/>
&gt;&gt;&gt; <span class="codestrong1">sheet</span><br/>
&lt;Worksheet "Sheet3"&gt;<br/>
&gt;&gt;&gt; <span class="codestrong1">type(sheet)</span><br/>
&lt;class 'openpyxl.worksheet.worksheet.Worksheet'&gt;<br/>
&gt;&gt;&gt; <span class="codestrong1">sheet.title</span> # Get the sheet's title as a string.<br/>
'Sheet3'<br/>
&gt;&gt;&gt; <span class="codestrong1">anotherSheet = wb.active</span> # Get the active sheet.<br/>
&gt;&gt;&gt; <span class="codestrong1">anotherSheet</span><br/>
&lt;Worksheet "Sheet1"&gt;</p>
<p class="indent">Each sheet is represented by a <span class="literal">Worksheet</span> object, which you can obtain by using the square brackets with the sheet name string like a dictionary key. Finally, you can use the <span class="literal">active</span> attribute of a <span class="literal">Workbook</span> object to get the workbook&#8217;s active sheet. The active sheet is the sheet that&#8217;s on top when the workbook is opened in Excel. Once you have the <span class="literal">Worksheet</span> object, you can get its name from the <span class="literal">title</span> attribute.</p>
<h4 class="h4" id="ch13lev2sec3"><strong><em>Getting Cells from the Sheets</em></strong></h4>
<p class="noindent">Once you have a <span class="literal">Worksheet</span> object, you can access a <span class="literal">Cell</span> object by its name. Enter the following into the interactive shell:</p>
<p class="programs">&gt;&gt;&gt; <span class="codestrong1">import openpyxl</span><br/>
&gt;&gt;&gt; <span class="codestrong1">wb = openpyxl.load_workbook('example.xlsx')</span><br/>
&gt;&gt;&gt; <span class="codestrong1">sheet = wb['Sheet1']</span> # Get a sheet from the workbook.<br/>
&gt;&gt;&gt; <span class="codestrong1">sheet['A1']</span> # Get a cell from the sheet.<br/>
&lt;Cell 'Sheet1'.A1&gt;<br/>
&gt;&gt;&gt; <span class="codestrong1">sheet['A1'].value</span> # Get the value from the cell.<br/>
datetime.datetime(2015, 4, 5, 13, 34, 2)<br/>
&gt;&gt;&gt; <span class="codestrong1">c = sheet['B1']</span> # Get another cell from the sheet.<br/>
&gt;&gt;&gt; <span class="codestrong1">c.value</span><br/>
'Apples'<br/>
&gt;&gt;&gt; # Get the row, column, and value from the cell.<br/>
&gt;&gt;&gt; <span class="codestrong1">'Row %s, Column %s is %s' % (c.row, c.column, c.value)</span><br/>
'Row 1, Column B is Apples'<br/>
&gt;&gt;&gt; <span class="codestrong1">'Cell %s is %s' % (c.coordinate, c.value)</span><br/>
'Cell B1 is Apples'<br/>
&gt;&gt;&gt; <span class="codestrong1">sheet['C1'].value</span><br/>
73</p>
<p class="indent">The <span class="literal">Cell</span> object has a <span class="literal">value</span> attribute that contains, unsurprisingly, the value stored in that cell. <span class="literal">Cell</span> objects also have <span class="literal">row</span>, <span class="literal">column</span>, and <span class="literal">coordinate</span> attributes that provide location information for the cell.</p>
<p class="indent"><span epub:type="pagebreak" id="page_305"/>Here, accessing the <span class="literal">value</span> attribute of our <span class="literal">Cell</span> object for cell B1 gives us the string <span class="literal">'Apples'</span>. The <span class="literal">row</span> attribute gives us the integer <span class="literal">1</span>, the <span class="literal">column</span> attribute gives us <span class="literal">'B'</span>, and the <span class="literal">coordinate</span> attribute gives us <span class="literal">'B1'</span>.</p>
<p class="indent">OpenPyXL will automatically interpret the dates in column A and return them as <span class="literal">datetime</span> values rather than strings. The <span class="literal">datetime</span> data type is explained further in <a href="ch17.xhtml#ch17">Chapter 17</a>.</p>
<p class="indent">Specifying a column by letter can be tricky to program, especially because after column Z, the columns start by using two letters: AA, AB, AC, and so on. As an alternative, you can also get a cell using the sheet&#8217;s <span class="literal">cell()</span> method and passing integers for its <span class="literal">row</span> and <span class="literal">column</span> keyword arguments. The first row or column integer is <span class="literal">1</span>, not <span class="literal">0</span>. Continue the interactive shell example by entering the following:</p>
<p class="programs">&gt;&gt;&gt; <span class="codestrong1">sheet.cell(row=1, column=2)</span><br/>
&lt;Cell 'Sheet1'.B1&gt;<br/>
&gt;&gt;&gt; <span class="codestrong1">sheet.cell(row=1, column=2).value</span><br/>
'Apples'<br/>
&gt;&gt;&gt; <span class="codestrong1">for i in range(1, 8, 2):</span> # Go through every other row:<br/>
<span class="codestrong1">...&#160;&#160;&#160;&#160;&#160;print(i, sheet.cell(row=i, column=2).value)</span><br/>
...<br/>
1 Apples<br/>
3 Pears<br/>
5 Apples<br/>
7 Strawberries</p>
<p class="indent">As you can see, using the sheet&#8217;s <span class="literal">cell()</span> method and passing it <span class="literal">row=1</span> and <span class="literal">column=2</span> gets you a <span class="literal">Cell</span> object for cell <span class="literal">B1</span>, just like specifying <span class="literal">sheet['B1']</span> did. Then, using the <span class="literal">cell()</span> method and its keyword arguments, you can write a <span class="literal">for</span> loop to print the values of a series of cells.</p>
<p class="indent">Say you want to go down column B and print the value in every cell with an odd row number. By passing <span class="literal">2</span> for the <span class="literal">range()</span> function&#8217;s &#8220;step&#8221; parameter, you can get cells from every second row (in this case, all the odd-numbered rows). The <span class="literal">for</span> loop&#8217;s <span class="literal">i</span> variable is passed for the <span class="literal">row</span> keyword argument to the <span class="literal">cell()</span> method, while <span class="literal">2</span> is always passed for the <span class="literal">column</span> keyword argument. Note that the integer <span class="literal">2</span>, not the string <span class="literal">'B'</span>, is passed.</p>
<p class="indent">You can determine the size of the sheet with the <span class="literal">Worksheet</span> object&#8217;s <span class="literal">max_row</span> and <span class="literal">max_column</span> attributes. Enter the following into the interactive shell:</p>
<p class="programs">&gt;&gt;&gt; <span class="codestrong1">import openpyxl</span><br/>
&gt;&gt;&gt; <span class="codestrong1">wb = openpyxl.load_workbook('example.xlsx')</span><br/>
&gt;&gt;&gt; <span class="codestrong1">sheet = wb['Sheet1']</span><br/>
&gt;&gt;&gt; <span class="codestrong1">sheet.max_row</span> # Get the highest row number.<br/>
7<br/>
&gt;&gt;&gt; <span class="codestrong1">sheet.max_column</span> # Get the highest column number.<br/>
3</p>
<p class="indent">Note that the <span class="literal">max_column</span> attribute is an integer rather than the letter that appears in Excel.</p>
<h4 class="h4" id="ch13lev2sec4"><span epub:type="pagebreak" id="page_306"/><strong><em>Converting Between Column Letters and Numbers</em></strong></h4>
<p class="noindent">To convert from letters to numbers, call the <span class="literal">openpyxl.utils.column_index_from_string()</span> function. To convert from numbers to letters, call the <span class="literal">openpyxl.utils.get_column_letter()</span> function. Enter the following into the interactive shell:</p>
<p class="programs">&gt;&gt;&gt; <span class="codestrong1">import openpyxl</span><br/>
&gt;&gt;&gt; <span class="codestrong1">from openpyxl.utils import get_column_letter, column_index_from_string</span><br/>
&gt;&gt;&gt; <span class="codestrong1">get_column_letter(1)</span> # Translate column 1 to a letter.<br/>
'A'<br/>
&gt;&gt;&gt; <span class="codestrong1">get_column_letter(2</span>)<br/>
'B'<br/>
&gt;&gt;&gt; <span class="codestrong1">get_column_letter(27)</span><br/>
'AA'<br/>
&gt;&gt;&gt; <span class="codestrong1">get_column_letter(900)</span><br/>
'AHP'<br/>
&gt;&gt;&gt; <span class="codestrong1">wb = openpyxl.load_workbook('example.xlsx')</span><br/>
&gt;&gt;&gt; <span class="codestrong1">sheet = wb['Sheet1']</span><br/>
&gt;&gt;&gt; <span class="codestrong1">get_column_letter(sheet.max_column)</span><br/>
'C'<br/>
&gt;&gt;&gt; <span class="codestrong1">column_index_from_string('A')</span> # Get A's number.<br/>
1<br/>
&gt;&gt;&gt; <span class="codestrong1">column_index_from_string('AA')</span><br/>
27</p>
<p class="indent">After you import these two functions from the <span class="literal">openpyxl.utils</span> module, you can call <span class="literal">get_column_letter()</span> and pass it an integer like 27 to figure out what the letter name of the 27th column is. The function <span class="literal">column_index_string()</span> does the reverse: you pass it the letter name of a column, and it tells you what number that column is. You don&#8217;t need to have a workbook loaded to use these functions. If you want, you can load a workbook, get a <span class="literal">Worksheet</span> object, and use a <span class="literal">Worksheet</span> attribute like <span class="literal">max_column</span> to get an integer. Then, you can pass that integer to <span class="literal">get_column_letter()</span>.</p>
<h4 class="h4" id="ch13lev2sec5"><strong><em>Getting Rows and Columns from the Sheets</em></strong></h4>
<p class="noindent">You can slice <span class="literal">Worksheet</span> objects to get all the <span class="literal">Cell</span> objects in a row, column, or rectangular area of the spreadsheet. Then you can loop over all the cells in the slice. Enter the following into the interactive shell:</p>
<p class="programs">&#160;&#160;&#160;&gt;&gt;&gt; <span class="codestrong1">import openpyxl</span><br/>
&#160;&#160;&#160;&gt;&gt;&gt; <span class="codestrong1">wb = openpyxl.load_workbook('example.xlsx')</span><br/>
&#160;&#160;&#160;&gt;&gt;&gt; <span class="codestrong1">sheet = wb['Sheet1']</span><br/>
&#160;&#160;&#160;&gt;&gt;&gt; <span class="codestrong1">tuple(sheet['A1':'C3'])</span> # Get all cells from A1 to C3.<br/>
&#160;&#160;&#160;((&lt;Cell 'Sheet1'.A1&gt;, &lt;Cell 'Sheet1'.B1&gt;, &lt;Cell 'Sheet1'.C1&gt;), (&lt;Cell<br/>
&#160;&#160;&#160;'Sheet1'.A2&gt;, &lt;Cell 'Sheet1'.B2&gt;, &lt;Cell 'Sheet1'.C2&gt;), (&lt;Cell 'Sheet1'.A3&gt;,<br/>
&#160;&#160;&#160;&lt;Cell 'Sheet1'.B3&gt;, &lt;Cell 'Sheet1'.C3&gt;))<br/>
<span class="ent">&#x278A;</span> &gt;&gt;&gt; <span class="codestrong1">for rowOfCellObjects in sheet['A1':'C3']:</span><br/>
<span class="ent">&#x278B;</span> <span class="codestrong1">...&#160;&#160;&#160;&#160;&#160;for cellObj in rowOfCellObjects:</span><br/>
&#160;&#160;&#160;<span class="codestrong1">...&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;print(cellObj.coordinate, cellObj.value)</span><br/>
&#160;&#160;&#160;<span class="codestrong1">...&#160;&#160;&#160;&#160;&#160;print('--- END OF ROW ---')</span><br/><br/>
&#160;&#160;&#160;A1 2015-04-05 13:34:02<br/>
<span epub:type="pagebreak" id="page_307"/>&#160;&#160;&#160;B1 Apples<br/>
&#160;&#160;&#160;C1 73<br/>
&#160;&#160;&#160;<span class="codestrong1">---</span> END OF ROW <span class="codestrong1">---</span><br/>
&#160;&#160;&#160;A2 2015-04-05 03:41:23<br/>
&#160;&#160;&#160;B2 Cherries<br/>
&#160;&#160;&#160;C2 85<br/>
&#160;&#160;&#160;<span class="codestrong1">---</span> END OF ROW <span class="codestrong1">---</span><br/>
&#160;&#160;&#160;A3 2015-04-06 12:46:51<br/>
&#160;&#160;&#160;B3 Pears<br/>
&#160;&#160;&#160;C3 14<br/>
&#160;&#160;&#160;<span class="codestrong1">---</span> END OF ROW <span class="codestrong1">---</span></p>
<p class="indent">Here, we specify that we want the <span class="literal">Cell</span> objects in the rectangular area from A1 to C3, and we get a <span class="literal">Generator</span> object containing the <span class="literal">Cell</span> objects in that area. To help us visualize this <span class="literal">Generator</span> object, we can use <span class="literal">tuple()</span> on it to display its <span class="literal">Cell</span> objects in a tuple.</p>
<p class="indent">This tuple contains three tuples: one for each row, from the top of the desired area to the bottom. Each of these three inner tuples contains the <span class="literal">Cell</span> objects in one row of our desired area, from the leftmost cell to the right. So overall, our slice of the sheet contains all the <span class="literal">Cell</span> objects in the area from A1 to C3, starting from the top-left cell and ending with the bottom-right cell.</p>
<p class="indent">To print the values of each cell in the area, we use two <span class="literal">for</span> loops. The outer <span class="literal">for</span> loop goes over each row in the slice <span class="ent">&#x278A;</span>. Then, for each row, the nested <span class="literal">for</span> loop goes through each cell in that row <span class="ent">&#x278B;</span>.</p>
<p class="indent">To access the values of cells in a particular row or column, you can also use a <span class="literal">Worksheet</span> object&#8217;s <span class="literal">rows</span> and <span class="literal">columns</span> attribute. These attributes must be converted to lists with the <span class="literal">list()</span> function before you can use the square brackets and an index with them. Enter the following into the interactive shell:</p>
<p class="programs">&gt;&gt;&gt; <span class="codestrong1">import openpyxl</span><br/>
&gt;&gt;&gt; <span class="codestrong1">wb = openpyxl.load_workbook('example.xlsx')</span><br/>
&gt;&gt;&gt; <span class="codestrong1">sheet = wb.active</span><br/>
&gt;&gt;&gt; <span class="codestrong1">list(sheet.columns)[1]</span> # Get second column's cells.<br/>
(&lt;Cell 'Sheet1'.B1&gt;, &lt;Cell 'Sheet1'.B2&gt;, &lt;Cell 'Sheet1'.B3&gt;, &lt;Cell 'Sheet1'.<br/>
B4&gt;, &lt;Cell 'Sheet1'.B5&gt;, &lt;Cell 'Sheet1'.B6&gt;, &lt;Cell 'Sheet1'.B7&gt;)<br/>
&gt;&gt;&gt; <span class="codestrong1">for cellObj in list(sheet.columns)[1]:</span><br/>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<span class="codestrong1">print(cellObj.value)</span><br/><br/>
Apples<br/>
Cherries<br/>
Pears<br/>
Oranges<br/>
Apples<br/>
Bananas<br/>
Strawberries</p>
<p class="indent">Using the <span class="literal">rows</span> attribute on a <span class="literal">Worksheet</span> object will give you a tuple of tuples. Each of these inner tuples represents a row, and contains the <span class="literal">Cell</span> objects in that row. The <span class="literal">columns</span> attribute also gives you a tuple of tuples, with each of the inner tuples containing the <span class="literal">Cell</span> objects in a particular <span epub:type="pagebreak" id="page_308"/>column. For <em>example.xlsx</em>, since there are 7 rows and 3 columns, <span class="literal">rows</span> gives us a tuple of 7 tuples (each containing 3 <span class="literal">Cell</span> objects), and <span class="literal">columns</span> gives us a tuple of 3 tuples (each containing 7 <span class="literal">Cell</span> objects).</p>
<p class="indent">To access one particular tuple, you can refer to it by its index in the larger tuple. For example, to get the tuple that represents column B, you use <span class="literal">list(sheet.columns)[1]</span>. To get the tuple containing the <span class="literal">Cell</span> objects in column A, you&#8217;d use <span class="literal">list(sheet.columns)[0]</span>. Once you have a tuple representing one row or column, you can loop through its <span class="literal">Cell</span> objects and print their values.</p>
<h4 class="h4" id="ch13lev2sec6"><strong><em>Workbooks, Sheets, Cells</em></strong></h4>
<p class="noindent">As a quick review, here&#8217;s a rundown of all the functions, methods, and data types involved in reading a cell out of a spreadsheet file:</p>
<ol>
<li class="noindent">Import the <span class="literal">openpyxl</span> module.</li>
<li class="noindent">Call the <span class="literal">openpyxl.load_workbook()</span> function.</li>
<li class="noindent">Get a <span class="literal">Workbook</span> object.</li>
<li class="noindent">Use the <span class="literal">active</span> or <span class="literal">sheetnames</span> attributes.</li>
<li class="noindent">Get a <span class="literal">Worksheet</span> object.</li>
<li class="noindent">Use indexing or the <span class="literal">cell()</span> sheet method with <span class="literal">row</span> and <span class="literal">column</span> keyword arguments.</li>
<li class="noindent">Get a <span class="literal">Cell</span> object.</li>
<li class="noindent">Read the <span class="literal">Cell</span> object&#8217;s <span class="literal">value</span> attribute.</li>
</ol>
<h3 class="h3" id="ch13lev1sec4"><strong>Project: Reading Data from a Spreadsheet</strong></h3>
<p class="noindent">Say you have a spreadsheet of data from the 2010 US Census and you have the boring task of going through its thousands of rows to count both the total population and the number of census tracts for each county. (A census tract is simply a geographic area defined for the purposes of the census.) Each row represents a single census tract. We&#8217;ll name the spreadsheet file <em>censuspopdata.xlsx</em>, and you can download it from <em><a href="https://nostarch.com/automatestuff2/">https://nostarch.com/automatestuff2/</a></em>. Its contents look like <a href="ch13.xhtml#ch13fig02">Figure 13-2</a>.</p>
<div class="image"><a id="ch13fig02"/><img src="../images/13fig02.jpg" alt="image"/></div>
<p class="figcap"><em>Figure 13-2: The</em> censuspopdata.xlsx <em>spreadsheet</em></p>
<p class="indent"><span epub:type="pagebreak" id="page_309"/>Even though Excel can calculate the sum of multiple selected cells, you&#8217;d still have to select the cells for each of the 3,000-plus counties. Even if it takes just a few seconds to calculate a county&#8217;s population by hand, this would take hours to do for the whole spreadsheet.</p>
<p class="indent">In this project, you&#8217;ll write a script that can read from the census spreadsheet file and calculate statistics for each county in a matter of seconds.</p>
<p class="indent">This is what your program does:</p>
<ol>
<li class="noindent">Reads the data from the Excel spreadsheet</li>
<li class="noindent">Counts the number of census tracts in each county</li>
<li class="noindent">Counts the total population of each county</li>
<li class="noindent">Prints the results</li></ol><p class="indent">This means your code will need to do the following:</p>
<ol>
<li class="noindent">Open and read the cells of an Excel document with the <span class="literal">openpyxl</span> module.</li>
<li class="noindent">Calculate all the tract and population data and store it in a data structure.</li>
<li class="noindent">Write the data structure to a text file with the <em>.py</em> extension using the <span class="literal">pprint</span> module.</li></ol>
<h4 class="h4" id="ch13lev2sec7"><strong><em>Step 1: Read the Spreadsheet Data</em></strong></h4>
<p class="noindent">There is just one sheet in the <em>censuspopdata.xlsx</em> spreadsheet, named <span class="literal">'Population by Census Tract'</span>, and each row holds the data for a single census tract. The columns are the tract number (A), the state abbreviation (B), the county name (C), and the population of the tract (D).</p>
<p class="indent">Open a new file editor tab and enter the following code. Save the file as <em>readCensusExcel.py</em>.</p>
<p class="programs">&#160;&#160;&#160;#! python3<br/>
&#160;&#160;&#160;# readCensusExcel.py - Tabulates population and number of census tracts for<br/>
&#160;&#160;&#160;# each county.<br/><br/>
<span class="ent">&#x278A;</span> import openpyxl, pprint<br/>
&#160;&#160;&#160;print('Opening workbook...')<br/>
<span class="ent">&#x278B;</span> wb = openpyxl.load_workbook('censuspopdata.xlsx')<br/>
<span class="ent">&#x278C;</span> sheet = wb['Population by Census Tract']<br/>
&#160;&#160;&#160;countyData = {}<br/><br/>
&#160;&#160;&#160;# TODO: Fill in countyData with each county's population and tracts.<br/>
&#160;&#160;&#160;print('Reading rows...')<br/>
<span class="ent">&#x278D;</span> for row in range(2, sheet.max_row + 1):<br/>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;# Each row in the spreadsheet has data for one census tract.<br/>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;state&#160;&#160;= sheet['B' + str(row)].value<br/>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;county = sheet['C' + str(row)].value<br/>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;pop&#160;&#160;&#160;&#160;= sheet['D' + str(row)].value<br/><br/>
# TODO: Open a new text file and write the contents of countyData to it.</p>
<p class="indent"><span epub:type="pagebreak" id="page_310"/>This code imports the <span class="literal">openpyxl</span> module, as well as the <span class="literal">pprint</span> module that you&#8217;ll use to print the final county data <span class="ent">&#x278A;</span>. Then it opens the <em>censuspopdata.xlsx</em> file <span class="ent">&#x278B;</span>, gets the sheet with the census data <span class="ent">&#x278C;</span>, and begins iterating over its rows <span class="ent">&#x278D;</span>.</p>
<p class="indent">Note that you&#8217;ve also created a variable named <span class="literal">countyData</span>, which will contain the populations and number of tracts you calculate for each county. Before you can store anything in it, though, you should determine exactly how you&#8217;ll structure the data inside it.</p>
<h4 class="h4" id="ch13lev2sec8"><strong><em>Step 2: Populate the Data Structure</em></strong></h4>
<p class="noindent">The data structure stored in <span class="literal">countyData</span> will be a dictionary with state abbreviations as its keys. Each state abbreviation will map to another dictionary, whose keys are strings of the county names in that state. Each county name will in turn map to a dictionary with just two keys, <span class="literal">'tracts'</span> and <span class="literal">'pop'</span>. These keys map to the number of census tracts and population for the county. For example, the dictionary will look similar to this:</p>
<p class="programs">{'AK': {'Aleutians East': {'pop': 3141, 'tracts': 1},<br/>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;'Aleutians West': {'pop': 5561, 'tracts': 2},<br/>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;'Anchorage': {'pop': 291826, 'tracts': 55},<br/>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;'Bethel': {'pop': 17013, 'tracts': 3},<br/>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;'Bristol Bay': {'pop': 997, 'tracts': 1},<br/>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;--<span class="codeitalic1">snip</span>--</p>
<p class="indent">If the previous dictionary were stored in <span class="literal">countyData</span>, the following expressions would evaluate like this:</p>
<p class="programs">&gt;&gt;&gt; <span class="codestrong1">countyData['AK']['Anchorage']['pop']</span><br/>
291826<br/>
&gt;&gt;&gt; <span class="codestrong1">countyData['AK']['Anchorage']['tracts']</span><br/>
55</p>
<p class="indent">More generally, the <span class="literal">countyData</span> dictionary&#8217;s keys will look like this:</p>
<p class="programs">countyData[<span class="codeitalic1">state abbrev</span>][<span class="codeitalic1">county</span>]['tracts']<br/>
countyData[<span class="codeitalic1">state abbrev</span>][<span class="codeitalic1">county</span>]['pop']</p>
<p class="indent">Now that you know how <span class="literal">countyData</span> will be structured, you can write the code that will fill it with the county data. Add the following code to the bottom of your program:</p>
<p class="programs">#! python 3<br/>
# readCensusExcel.py - Tabulates population and number of census tracts for<br/>
# each county.<br/><br/>
--<span class="codeitalic1">snip</span>--<br/><br/>
<span epub:type="pagebreak" id="page_311"/>for row in range(2, sheet.max_row + 1):<br/>
&#160;&#160;&#160;&#160;&#160;# Each row in the spreadsheet has data for one census tract.<br/>
&#160;&#160;&#160;&#160;&#160;state&#160;&#160;= sheet['B' + str(row)].value<br/>
&#160;&#160;&#160;&#160;&#160;county = sheet['C' + str(row)].value<br/>
&#160;&#160;&#160;&#160;&#160;pop&#160;&#160;&#160;&#160;= sheet['D' + str(row)].value<br/><br/>
<span class="codestrong1">&#160;&#160;&#160;&#160;&#160;# Make sure the key for this state exists.</span><br/>
<span class="codestrong1">&#160;&#160;</span><span class="ent">&#x278A;</span> <span class="codestrong1">countyData.setdefault(state, {})</span><br/>
<span class="codestrong1">&#160;&#160;&#160;&#160;&#160;# Make sure the key for this county in this state exists.</span><br/>
<span class="codestrong1">&#160;&#160;</span><span class="ent">&#x278B;</span> <span class="codestrong1">countyData[state].setdefault(county, {'tracts': 0, 'pop': 0})</span><br/><br/>
<span class="codestrong1">&#160;&#160;&#160;&#160;&#160;# Each row represents one census tract, so increment by one.</span><br/>
<span class="codestrong1">&#160;&#160;</span><span class="ent">&#x278C;</span> <span class="codestrong1">countyData[state][county]['tracts'] += 1</span><br/>
<span class="codestrong1">&#160;&#160;&#160;&#160;&#160;# Increase the county pop by the pop in this census tract.</span><br/>
<span class="codestrong1">&#160;&#160;</span><span class="ent">&#x278D;</span> <span class="codestrong1">countyData[state][county]['pop'] += int(pop)</span><br/><br/>
# TODO: Open a new text file and write the contents of countyData to it.</p>
<p class="indent">The last two lines of code perform the actual calculation work, incrementing the value for <span class="literal">tracts</span> <span class="ent">&#x278C;</span> and increasing the value for <span class="literal">pop</span> <span class="ent">&#x278D;</span> for the current county on each iteration of the <span class="literal">for</span> loop.</p>
<p class="indent">The other code is there because you cannot add a county dictionary as the value for a state abbreviation key until the key itself exists in <span class="literal">countyData</span>. (That is, <span class="literal">countyData['AK']['Anchorage']['tracts'] += 1</span> will cause an error if the '<span class="literal">AK'</span> key doesn&#8217;t exist yet.) To make sure the state abbreviation key exists in your data structure, you need to call the <span class="literal">setdefault()</span> method to set a value if one does not already exist for <span class="literal">state</span> <span class="ent">&#x278A;</span>.</p>
<p class="indent">Just as the <span class="literal">countyData</span> dictionary needs a dictionary as the value for each state abbreviation key, each of <em>those</em> dictionaries will need its own dictionary as the value for each county key <span class="ent">&#x278B;</span>. And each of <em>those</em> dictionaries in turn will need keys <span class="literal">'tracts'</span> and <span class="literal">'pop'</span> that start with the integer value <span class="literal">0</span>. (If you ever lose track of the dictionary structure, look back at the example dictionary at the start of this section.)</p>
<p class="indent">Since <span class="literal">setdefault()</span> will do nothing if the key already exists, you can call it on every iteration of the <span class="literal">for</span> loop without a problem.</p>
<h4 class="h4" id="ch13lev2sec9"><strong><em>Step 3: Write the Results to a File</em></strong></h4>
<p class="noindent">After the <span class="literal">for</span> loop has finished, the <span class="literal">countyData</span> dictionary will contain all of the population and tract information keyed by county and state. At this point, you could program more code to write this to a text file or another Excel spreadsheet. For now, let&#8217;s just use the <span class="literal">pprint.pformat()</span> function to write the <span class="literal">countyData</span> dictionary value as a massive string to a file named <em>census2010.py</em>. Add the following code to the bottom of your program (making sure to keep it unindented so that it stays outside the <span class="literal">for</span> loop):</p>
<p class="programs">#! python 3<br/>
# readCensusExcel.py - Tabulates population and number of census tracts for<br/>
# each county.<br/><br/>
<span epub:type="pagebreak" id="page_312"/>--<span class="codeitalic1">snip</span>--<br/><br/>
for row in range(2, sheet.max_row + 1):<br/>
--<span class="codeitalic1">snip</span>--<br/><br/>
<span class="codestrong1"># Open a new text file and write the contents of countyData to it.</span><br/>
<span class="codestrong1">print('Writing results...')</span><br/>
<span class="codestrong1">resultFile = open('census2010.py', 'w')</span><br/>
<span class="codestrong1">resultFile.write('allData = ' + pprint.pformat(countyData))</span><br/>
<span class="codestrong1">resultFile.close()</span><br/>
<span class="codestrong1">print('Done.')</span></p>
<p class="indent">The <span class="literal">pprint.pformat()</span> function produces a string that itself is formatted as valid Python code. By outputting it to a text file named <em>census2010.py</em>, you&#8217;ve generated a Python program from your Python program! This may seem complicated, but the advantage is that you can now import <em>census2010.py</em> just like any other Python module. In the interactive shell, change the current working directory to the folder with your newly created <em>census2010.py</em> file and then import it:</p>
<p class="programs">&gt;&gt;&gt; <span class="codestrong1">import os</span><br/><br/>
&gt;&gt;&gt; <span class="codestrong1">import census2010</span><br/>
&gt;&gt;&gt; <span class="codestrong1">census2010.allData['AK']['Anchorage']</span><br/>
{'pop': 291826, 'tracts': 55}<br/>
&gt;&gt;&gt; <span class="codestrong1">anchoragePop = census2010.allData['AK']['Anchorage']['pop']</span><br/>
&gt;&gt;&gt; <span class="codestrong1">print('The 2010 population of Anchorage was ' + str(anchoragePop))</span><br/>
The 2010 population of Anchorage was 291826</p>
<p class="indent">The <em>readCensusExcel.py</em> program was throwaway code: once you have its results saved to <em>census2010.py</em>, you won&#8217;t need to run the program again. Whenever you need the county data, you can just run <span class="literal">import census2010</span>.</p>
<p class="indent">Calculating this data by hand would have taken hours; this program did it in a few seconds. Using OpenPyXL, you will have no trouble extracting information that is saved to an Excel spreadsheet and performing calculations on it. You can download the complete program from <em><a href="https://nostarch.com/automatestuff2/">https://nostarch.com/automatestuff2/</a></em>.</p>
<h4 class="h4" id="ch13lev2sec10"><strong><em>Ideas for Similar Programs</em></strong></h4>
<p class="noindent">Many businesses and offices use Excel to store various types of data, and it&#8217;s not uncommon for spreadsheets to become large and unwieldy. Any program that parses an Excel spreadsheet has a similar structure: it loads the spreadsheet file, preps some variables or data structures, and then loops through each of the rows in the spreadsheet. Such a program could do the following:</p>
<ul>
<li class="noindent">Compare data across multiple rows in a spreadsheet.</li>
<li class="noindent">Open multiple Excel files and compare data between spreadsheets.</li>
<li class="noindent"><span epub:type="pagebreak" id="page_313"/>Check whether a spreadsheet has blank rows or invalid data in any cells and alert the user if it does.</li>
<li class="noindent">Read data from a spreadsheet and use it as the input for your Python programs.</li>
</ul>
<h3 class="h3" id="ch13lev1sec5"><strong>Writing Excel Documents</strong></h3>
<p class="noindent">OpenPyXL also provides ways of writing data, meaning that your programs can create and edit spreadsheet files. With Python, it&#8217;s simple to create spreadsheets with thousands of rows of data.</p>
<h4 class="h4" id="ch13lev2sec11"><strong><em>Creating and Saving Excel Documents</em></strong></h4>
<p class="noindent">Call the <span class="literal">openpyxl.Workbook()</span> function to create a new, blank <span class="literal">Workbook</span> object. Enter the following into the interactive shell:</p>
<p class="programs">&gt;&gt;&gt; <span class="codestrong1">import openpyxl</span><br/>
&gt;&gt;&gt; <span class="codestrong1">wb = openpyxl.Workbook()</span> # Create a blank workbook.<br/>
&gt;&gt;&gt; <span class="codestrong1">wb.sheetnames</span> # It starts with one sheet.<br/>
['Sheet']<br/>
&gt;&gt;&gt; <span class="codestrong1">sheet = wb.active</span><br/>
&gt;&gt;&gt; <span class="codestrong1">sheet.title</span><br/>
'Sheet'<br/>
&gt;&gt;&gt; <span class="codestrong1">sheet.title = 'Spam Bacon Eggs Sheet'</span> # Change title.<br/>
&gt;&gt;&gt; <span class="codestrong1">wb.sheetnames</span><br/>
['Spam Bacon Eggs Sheet']</p>
<p class="indent">The workbook will start off with a single sheet named <em>Sheet</em>. You can change the name of the sheet by storing a new string in its <span class="literal">title</span> attribute.</p>
<p class="indent">Any time you modify the <span class="literal">Workbook</span> object or its sheets and cells, the spreadsheet file will not be saved until you call the <span class="literal">save()</span> workbook method. Enter the following into the interactive shell (with <em>example.xlsx</em> in the current working directory):</p>
<p class="programs">&gt;&gt;&gt; <span class="codestrong1">import openpyxl</span><br/>
&gt;&gt;&gt; <span class="codestrong1">wb = openpyxl.load_workbook('example.xlsx')</span><br/>
&gt;&gt;&gt; <span class="codestrong1">sheet = wb.active</span><br/>
&gt;&gt;&gt; <span class="codestrong1">sheet.title = 'Spam Spam Spam'</span><br/>
&gt;&gt;&gt; <span class="codestrong1">wb.save('example_copy.xlsx')</span> # Save the workbook.</p>
<p class="indent">Here, we change the name of our sheet. To save our changes, we pass a filename as a string to the <span class="literal">save()</span> method. Passing a different filename than the original, such as <span class="literal">'example_copy.xlsx'</span>, saves the changes to a copy of the spreadsheet.</p>
<p class="indent">Whenever you edit a spreadsheet you&#8217;ve loaded from a file, you should always save the new, edited spreadsheet to a different filename than the original. That way, you&#8217;ll still have the original spreadsheet file to work with in case a bug in your code caused the new, saved file to have incorrect or corrupt data.</p>
<h4 class="h4" id="ch13lev2sec12"><span epub:type="pagebreak" id="page_314"/><strong><em>Creating and Removing Sheets</em></strong></h4>
<p class="noindent">Sheets can be added to and removed from a workbook with the <span class="literal">create_sheet()</span> method and <span class="literal">del</span> operator. Enter the following into the interactive shell:</p>
<p class="programs">&gt;&gt;&gt; <span class="codestrong1">import openpyxl</span><br/>
&gt;&gt;&gt; <span class="codestrong1">wb = openpyxl.Workbook()</span><br/>
&gt;&gt;&gt; <span class="codestrong1">wb.sheetnames</span><br/>
['Sheet']<br/>
&gt;&gt;&gt; <span class="codestrong1">wb.create_sheet()</span> # Add a new sheet.<br/>
&lt;Worksheet "Sheet1"&gt;<br/>
&gt;&gt;&gt; <span class="codestrong1">wb.sheetnames</span><br/>
['Sheet', 'Sheet1']<br/>
&gt;&gt;&gt; # Create a new sheet at index 0.<br/>
&gt;&gt;&gt; <span class="codestrong1">wb.create_sheet(index=0, title='First Sheet')</span><br/>
&lt;Worksheet "First Sheet"&gt;<br/>
&gt;&gt;&gt; <span class="codestrong1">wb.sheetnames</span><br/>
['First Sheet', 'Sheet', 'Sheet1']<br/>
&gt;&gt;&gt; <span class="codestrong1">wb.create_sheet(index=2, title='Middle Sheet')</span><br/>
&lt;Worksheet "Middle Sheet"&gt;<br/>
&gt;&gt;&gt; <span class="codestrong1">wb.sheetnames</span><br/>
['First Sheet', 'Sheet', 'Middle Sheet', 'Sheet1']</p>
<p class="indent">The <span class="literal">create_sheet()</span> method returns a new <span class="literal">Worksheet</span> object named <span class="literal">Sheet</span><span class="codeitalic">X</span>, which by default is set to be the last sheet in the workbook. Optionally, the index and name of the new sheet can be specified with the <span class="literal">index</span> and <span class="literal">title</span> keyword arguments.</p>
<p class="indent">Continue the previous example by entering the following:</p>
<p class="programs">&gt;&gt;&gt; <span class="codestrong1">wb.sheetnames</span><br/>
['First Sheet', 'Sheet', 'Middle Sheet', 'Sheet1']<br/>
&gt;&gt;&gt; <span class="codestrong1">del wb['Middle Sheet']</span><br/>
&gt;&gt;&gt; <span class="codestrong1">del wb['Sheet1']</span><br/>
&gt;&gt;&gt; <span class="codestrong1">wb.sheetnames</span><br/>
['First Sheet', 'Sheet']</p>
<p class="indent">You can use the <span class="literal">del</span> operator to delete a sheet from a workbook, just like you can use it to delete a key-value pair from a dictionary.</p>
<p class="indent">Remember to call the <span class="literal">save()</span> method to save the changes after adding sheets to or removing sheets from the workbook.</p>
<h4 class="h4" id="ch13lev2sec13"><strong><em>Writing Values to Cells</em></strong></h4>
<p class="noindent">Writing values to cells is much like writing values to keys in a dictionary. Enter this into the interactive shell:</p>
<p class="programs">&gt;&gt;&gt; <span class="codestrong1">import openpyxl</span><br/>
&gt;&gt;&gt; <span class="codestrong1">wb = openpyxl.Workbook()</span><br/>
&gt;&gt;&gt; <span class="codestrong1">sheet = wb['Sheet']</span><br/>
&gt;&gt;&gt; <span class="codestrong1">sheet['A1'] = 'Hello, world!'</span> # Edit the cell's value.<br/>
&gt;&gt;&gt; <span class="codestrong1">sheet['A1'].value</span><br/>
'Hello, world!'</p>
<p class="indent"><span epub:type="pagebreak" id="page_315"/>If you have the cell&#8217;s coordinate as a string, you can use it just like a dictionary key on the <span class="literal">Worksheet</span> object to specify which cell to write to.</p>
<h3 class="h3" id="ch13lev1sec6"><strong>Project: Updating a Spreadsheet</strong></h3>
<p class="noindent">In this project, you&#8217;ll write a program to update cells in a spreadsheet of produce sales. Your program will look through the spreadsheet, find specific kinds of produce, and update their prices. Download this spreadsheet from <em><a href="https://nostarch.com/automatestuff2/">https://nostarch.com/automatestuff2/</a></em>. <a href="ch13.xhtml#ch13fig03">Figure 13-3</a> shows what the spreadsheet looks like.</p>
<div class="image"><a id="ch13fig03"/><img src="../images/13fig03.jpg" alt="image"/></div>
<p class="figcap"><em>Figure 13-3: A spreadsheet of produce sales</em></p>
<p class="indent">Each row represents an individual sale. The columns are the type of produce sold (A), the cost per pound of that produce (B), the number of pounds sold (C), and the total revenue from the sale (D). The TOTAL column is set to the Excel formula <em>=ROUND(B3*C3, 2)</em>, which multiplies the cost per pound by the number of pounds sold and rounds the result to the nearest cent. With this formula, the cells in the TOTAL column will automatically update themselves if there is a change in column B or C.</p>
<p class="indent">Now imagine that the prices of garlic, celery, and lemons were entered incorrectly, leaving you with the boring task of going through thousands of rows in this spreadsheet to update the cost per pound for any garlic, celery, and lemon rows. You can&#8217;t do a simple find-and-replace for the price, because there might be other items with the same price that you don&#8217;t want to mistakenly &#8220;correct.&#8221; For thousands of rows, this would take hours to do by hand. But you can write a program that can accomplish this in seconds.</p>
<p class="indent">Your program does the following:</p>
<ol>
<li class="noindent">Loops over all the rows</li>
<li class="noindent">If the row is for garlic, celery, or lemons, changes the price</li>
</ol>
<p class="indent"><span epub:type="pagebreak" id="page_316"/>This means your code will need to do the following:</p>
<ol>
<li class="noindent">Open the spreadsheet file.</li>
<li class="noindent">For each row, check whether the value in column A is <span class="literal">Celery</span>, <span class="literal">Garlic</span>, or <span class="literal">Lemon</span>.</li>
<li class="noindent">If it is, update the price in column B.</li>
<li class="noindent">Save the spreadsheet to a new file (so that you don&#8217;t lose the old spreadsheet, just in case).</li>
</ol>
<h4 class="h4" id="ch13lev2sec14"><strong><em>Step 1: Set Up a Data Structure with the Update Information</em></strong></h4>
<p class="noindentb">The prices that you need to update are as follows:</p>
<p class="hang">Celery&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;1.19</p>
<p class="hang">Garlic&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;3.07</p>
<p class="hang">Lemon&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;1.27</p>
<p class="indentt">You could write code like this:</p>
<p class="programs">if produceName == 'Celery':<br/>
&#160;&#160;&#160;&#160;cellObj = 1.19<br/>
if produceName == 'Garlic':<br/>
&#160;&#160;&#160;&#160;cellObj = 3.07<br/>
if produceName == 'Lemon':<br/>
&#160;&#160;&#160;&#160;cellObj = 1.27</p>
<p class="indent">Having the produce and updated price data hardcoded like this is a bit inelegant. If you needed to update the spreadsheet again with different prices or different produce, you would have to change a lot of the code. Every time you change code, you risk introducing bugs.</p>
<p class="indent">A more flexible solution is to store the corrected price information in a dictionary and write your code to use this data structure. In a new file editor tab, enter the following code:</p>
<p class="programs">#! python3<br/>
# updateProduce.py - Corrects costs in produce sales spreadsheet.<br/><br/>
import openpyxl<br/><br/>
wb = openpyxl.load_workbook('produceSales.xlsx')<br/>
sheet = wb['Sheet']<br/><br/>
# The produce types and their updated prices<br/>
PRICE_UPDATES = {'Garlic': 3.07,<br/>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;'Celery': 1.19,<br/>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;'Lemon': 1.27}<br/><br/>
# TODO: Loop through the rows and update the prices.</p>
<p class="indent">Save this as <em>updateProduce.py</em>. If you need to update the spreadsheet again, you&#8217;ll need to update only the <span class="literal">PRICE_UPDATES</span> dictionary, not any other code.</p>
<h4 class="h4" id="ch13lev2sec15"><span epub:type="pagebreak" id="page_317"/><strong><em>Step 2: Check All Rows and Update Incorrect Prices</em></strong></h4>
<p class="noindent">The next part of the program will loop through all the rows in the spreadsheet. Add the following code to the bottom of <em>updateProduce.py</em>:</p>
<p class="programs">&#160;&#160;&#160;#! python3<br/>
&#160;&#160;&#160;# updateProduce.py - Corrects costs in produce sales spreadsheet.<br/><br/>
&#160;&#160;&#160;--<span class="codeitalic1">snip</span>--<br/><br/>
&#160;&#160;&#160;<span class="codestrong1"># Loop through the rows and update the prices.</span><br/>
<span class="ent">&#x278A;</span> <span class="codestrong1">for rowNum in range(2, sheet.max_row + 1):&#160;&#160;&#160;&#160;# skip the first row</span><br/>
<span class="codestrong1">&#160;&#160;&#160;&#160;</span><span class="ent">&#x278B;</span> <span class="codestrong1">produceName = sheet.cell(row=rowNum, column=1).value</span><br/>
<span class="codestrong1">&#160;&#160;&#160;&#160;</span><span class="ent">&#x278C;</span> <span class="codestrong1">if produceName in PRICE_UPDATES:</span><br/>
&#160;<span class="codestrong1">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sheet.cell(row=rowNum, column=2).value = PRICE_UPDATES[produceName]</span><br/><br/>
<span class="ent">&#x278D;</span> <span class="codestrong1">wb.save('updatedProduceSales.xlsx')</span></p>
<p class="indent">We loop through the rows starting at row 2, since row 1 is just the header <span class="ent">&#x278A;</span>. The cell in column 1 (that is, column A) will be stored in the variable <span class="literal">produceName</span> <span class="ent">&#x278B;</span>. If <span class="literal">produceName</span> exists as a key in the <span class="literal">PRICE_UPDATES</span> dictionary <span class="ent">&#x278C;</span>, then you know this is a row that must have its price corrected. The correct price will be in <span class="literal">PRICE_UPDATES[produceName]</span>.</p>
<p class="indent">Notice how clean using <span class="literal">PRICE_UPDATES</span> makes the code. Only one <span class="literal">if</span> statement, rather than code like <span class="literal">if produceName == 'Garlic':</span> , is necessary for every type of produce to update. And since the code uses the <span class="literal">PRICE_UPDATES</span> dictionary instead of hardcoding the produce names and updated costs into the <span class="literal">for</span> loop, you modify only the <span class="literal">PRICE_UPDATES</span> dictionary and not the code if the produce sales spreadsheet needs additional changes.</p>
<p class="indent">After going through the entire spreadsheet and making changes, the code saves the <span class="literal">Workbook</span> object to <em>updatedProduceSales.xlsx</em> <span class="ent">&#x278D;</span>. It doesn&#8217;t overwrite the old spreadsheet just in case there&#8217;s a bug in your program and the updated spreadsheet is wrong. After checking that the updated spreadsheet looks right, you can delete the old spreadsheet.</p>
<p class="indent">You can download the complete source code for this program from <em><a href="https://nostarch.com/automatestuff2/">https://nostarch.com/automatestuff2/</a></em>.</p>
<h4 class="h4" id="ch13lev2sec16"><strong><em>Ideas for Similar Programs</em></strong></h4>
<p class="noindent">Since many office workers use Excel spreadsheets all the time, a program that can automatically edit and write Excel files could be really useful. Such a program could do the following:</p>
<ul>
<li class="noindent">Read data from one spreadsheet and write it to parts of other spreadsheets.</li>
<li class="noindent">Read data from websites, text files, or the clipboard and write it to a spreadsheet.</li>
<li class="noindent">Automatically &#8220;clean up&#8221; data in spreadsheets. For example, it could use regular expressions to read multiple formats of phone numbers and edit them to a single, standard format.</li>
</ul>
<h3 class="h3" id="ch13lev1sec7"><span epub:type="pagebreak" id="page_318"/><strong>Setting the Font Style of Cells</strong></h3>
<p class="noindent">Styling certain cells, rows, or columns can help you emphasize important areas in your spreadsheet. In the produce spreadsheet, for example, your program could apply bold text to the potato, garlic, and parsnip rows. Or perhaps you want to italicize every row with a cost per pound greater than $5. Styling parts of a large spreadsheet by hand would be tedious, but your programs can do it instantly.</p>
<p class="indent">To customize font styles in cells, important, import the <span class="literal">Font()</span> function from the <span class="literal">openpyxl.styles</span> module.</p>
<p class="programs">from openpyxl.styles import Font</p>
<p class="indent">This allows you to type <span class="literal">Font()</span> instead of <span class="literal">openpyxl.styles.Font()</span>. (See &#8220;<a href="ch02.xhtml#ch02lev1sec8">Importing Modules</a>&#8221; on <a href="ch02.xhtml#page_47">page 47</a> to review this style of <span class="literal">import</span> statement.)</p>
<p class="indent">Here&#8217;s an example that creates a new workbook and sets cell A1 to have a 24-point, italicized font. Enter the following into the interactive shell:</p>
<p class="programs">&#160;&#160;&gt;&gt;&gt; <span class="codestrong1">import openpyxl</span><br/>
&#160;&#160;&gt;&gt;&gt; <span class="codestrong1">from openpyxl.styles import Font</span><br/>
&#160;&#160;&gt;&gt;&gt; <span class="codestrong1">wb = openpyxl.Workbook()</span><br/>
&#160;&#160;&gt;&gt;&gt; <span class="codestrong1">sheet = wb['Sheet']</span><br/>
<span class="ent">&#x278A;</span> &gt;&gt;&gt; <span class="codestrong1">italic24Font = Font(size=24, italic=True)</span> # Create a font.<br/>
<span class="ent">&#x278B;</span> &gt;&gt;&gt; <span class="codestrong1">sheet['A1'].font = italic24Font</span> # Apply the font to A1.<br/>
&#160;&#160;&gt;&gt;&gt; <span class="codestrong1">sheet['A1'] = 'Hello, world!'</span><br/>
&#160;&#160;&gt;&gt;&gt; <span class="codestrong1">wb.save('styles.xlsx')</span></p>
<p class="indent">In this example, <span class="literal">Font(size=24, italic=True)</span> returns a <span class="literal">Font</span> object, which is stored in <span class="literal">italic24Font</span> <span class="ent">&#x278A;</span>. The keyword arguments to <span class="literal">Font()</span>, <span class="literal">size</span> and <span class="literal">italic</span>, configure the <span class="literal">Font</span> object&#8217;s styling information. And when <span class="literal">sheet['A1'].font</span> is assigned the <span class="literal">italic24Font</span> object <span class="ent">&#x278B;</span>, all that font styling information gets applied to cell A1.</p>
<h3 class="h3" id="ch13lev1sec8"><strong>Font Objects</strong></h3>
<p class="noindent">To set <span class="literal">font</span> attributes, you pass keyword arguments to <span class="literal">Font()</span>. <a href="ch13.xhtml#ch13tab02">Table 13-2</a> shows the possible keyword arguments for the <span class="literal">Font()</span> function.</p>
<p class="tabcap" id="ch13tab02"><strong>Table 13-2:</strong> Keyword Arguments for <span class="literal">Font</span> Objects</p>
<table class="topbot-d">
<colgroup>
<col style="width:35%"/>
<col style="width:35%"/>
<col style="width:30%"/>
</colgroup>
<thead>
<tr>
<td style="vertical-align: top;" class="table-h"><p class="tab_th"><strong>Keyword argument</strong></p></td>
<td style="vertical-align: top;" class="table-h"><p class="tab_th"><strong>Data type</strong></p></td>
<td style="vertical-align: top;" class="table-h"><p class="tab_th"><strong>Description</strong></p></td>
</tr>
</thead>
<tbody>
<tr>
<td style="vertical-align: top;" class="table-b"><p class="taba"><span class="literal">name</span></p></td>
<td style="vertical-align: top;" class="table-b"><p class="taba">String</p></td>
<td style="vertical-align: top;" class="table-b"><p class="taba">The font name, such as <span class="literal">'Calibri'</span> or <span class="literal">'Times New Roman'</span></p></td>
</tr>
<tr>
<td style="vertical-align: top;" class="table-b"><p class="taba"><span class="literal">size</span></p></td>
<td style="vertical-align: top;" class="table-b"><p class="taba">Integer</p></td>
<td style="vertical-align: top;" class="table-b"><p class="taba">The point size</p></td>
</tr>
<tr>
<td style="vertical-align: top;" class="table-b"><p class="taba"><span class="literal">bold</span></p></td>
<td style="vertical-align: top;" class="table-b"><p class="taba">Boolean</p></td>
<td style="vertical-align: top;" class="table-b"><p class="taba"><span class="literal">True</span>, for bold font</p></td>
</tr>
<tr>
<td style="vertical-align: top;" class="table-ba"><p class="taba"><span class="literal">italic</span></p></td>
<td style="vertical-align: top;" class="table-ba"><p class="taba">Boolean</p></td>
<td style="vertical-align: top;" class="table-ba"><p class="taba"><span class="literal">True</span>, for italic font</p></td>
</tr>
</tbody>
</table>
<p class="indent"><span epub:type="pagebreak" id="page_319"/>You can call <span class="literal">Font()</span> to create a <span class="literal">Font</span> object and store that <span class="literal">Font</span> object in a variable. You then assign that variable to a <span class="literal">Cell</span> object&#8217;s <span class="literal">font</span> attribute. For example, this code creates various font styles:</p>
<p class="programs">&gt;&gt;&gt; <span class="codestrong1">import openpyxl</span><br/>
&gt;&gt;&gt; <span class="codestrong1">from openpyxl.styles import Font</span><br/>
&gt;&gt;&gt; <span class="codestrong1">wb = openpyxl.Workbook()</span><br/>
&gt;&gt;&gt; <span class="codestrong1">sheet = wb['Sheet']</span><br/><br/>
&gt;&gt;&gt; <span class="codestrong1">fontObj1 = Font(name='Times New Roman', bold=True)</span><br/>
&gt;&gt;&gt; <span class="codestrong1">sheet['A1'].font = fontObj1</span><br/>
&gt;&gt;&gt; <span class="codestrong1">sheet['A1'] = 'Bold Times New Roman'</span><br/><br/>
&gt;&gt;&gt; <span class="codestrong1">fontObj2 = Font(size=24, italic=True)</span><br/>
&gt;&gt;&gt; <span class="codestrong1">sheet['B3'].font = fontObj2</span><br/>
&gt;&gt;&gt; <span class="codestrong1">sheet['B3'] = '24 pt Italic'</span><br/><br/>
&gt;&gt;&gt; <span class="codestrong1">wb.save('styles.xlsx')</span></p>
<p class="indent">Here, we store a <span class="literal">Font</span> object in <span class="literal">fontObj1</span> and then set the A1 <span class="literal">Cell</span> object&#8217;s <span class="literal">font</span> attribute to <span class="literal">fontObj1</span>. We repeat the process with another <span class="literal">Font</span> object to set the font of a second cell. After you run this code, the styles of the A1 and B3 cells in the spreadsheet will be set to custom font styles, as shown in <a href="ch13.xhtml#ch13fig04">Figure 13-4</a>.</p>
<div class="image"><a id="ch13fig04"/><img src="../images/13fig04.jpg" alt="image"/></div>
<p class="figcap"><em>Figure 13-4: A spreadsheet with custom font styles</em></p>
<p class="indent">For cell A1, we set the font name to <span class="literal">'Times New Roman'</span> and set <span class="literal">bold</span> to <span class="literal">true</span>, so our text appears in bold Times New Roman. We didn&#8217;t specify a size, so the <span class="literal">openpyxl</span> default, 11, is used. In cell B3, our text is italic, with a size of 24; we didn&#8217;t specify a font name, so the <span class="literal">openpyxl</span> default, Calibri, is used.</p>
<h3 class="h3" id="ch13lev1sec9"><strong>Formulas</strong></h3>
<p class="noindent">Excel formulas, which begin with an equal sign, can configure cells to contain values calculated from other cells. In this section, you&#8217;ll use the <span class="literal">openpyxl</span> module to programmatically add formulas to cells, just like any normal value. For example:</p>
<p class="programs"><span class="codestrong1">&gt;&gt;&gt; sheet['B9'] = '=SUM(B1:B8)'</span></p>
<p class="indent"><span epub:type="pagebreak" id="page_320"/>This will store <em>=SUM(B1:B8)</em> as the value in cell B9. This sets the B9 cell to a formula that calculates the sum of values in cells B1 to B8. You can see this in action in <a href="ch13.xhtml#ch13fig05">Figure 13-5</a>.</p>
<div class="image"><a id="ch13fig05"/><img src="../images/13fig05.jpg" alt="image"/></div>
<p class="figcap"><em>Figure 13-5: Cell B9 contains the formula</em> =SUM(B1:B8), <em>which adds the cells B1 to B8.</em></p>
<p class="indent">An Excel formula is set just like any other text value in a cell. Enter the following into the interactive shell:</p>
<p class="programs">&gt;&gt;&gt; <span class="codestrong1">import openpyxl</span><br/>
&gt;&gt;&gt; <span class="codestrong1">wb = openpyxl.Workbook()</span><br/>
&gt;&gt;&gt; <span class="codestrong1">sheet = wb.active</span><br/>
&gt;&gt;&gt; <span class="codestrong1">sheet['A1'] = 200</span><br/>
&gt;&gt;&gt; <span class="codestrong1">sheet['A2'] = 300</span><br/>
&gt;&gt;&gt; <span class="codestrong1">sheet['A3'] = '=SUM(A1:A2)'</span> # Set the formula.<br/>
&gt;&gt;&gt; <span class="codestrong1">wb.save('writeFormula.xlsx')</span></p>
<p class="indent">The cells in A1 and A2 are set to 200 and 300, respectively. The value in cell A3 is set to a formula that sums the values in A1 and A2. When the spreadsheet is opened in Excel, A3 will display its value as 500.</p>
<p class="indent">Excel formulas offer a level of programmability for spreadsheets but can quickly become unmanageable for complicated tasks. For example, even if you&#8217;re deeply familiar with Excel formulas, it&#8217;s a headache to try to decipher what <em>=IFERROR(TRIM(IF(LEN(VLOOKUP(F7, Sheet2!$A$1:$B$10000, 2, FALSE))&gt;0,SUBSTITUTE(VLOOKUP(F7, Sheet2!$A$1:$B$10000, 2, FALSE), " ", ""),"")), "")</em> actually does. Python code is much more readable.</p>
<h3 class="h3" id="ch13lev1sec10"><strong>Adjusting Rows and Columns</strong></h3>
<p class="noindent">In Excel, adjusting the sizes of rows and columns is as easy as clicking and dragging the edges of a row or column header. But if you need to set a row <span epub:type="pagebreak" id="page_321"/>or column&#8217;s size based on its cells&#8217; contents or if you want to set sizes in a large number of spreadsheet files, it will be much quicker to write a Python program to do it.</p>
<p class="indent">Rows and columns can also be hidden entirely from view. Or they can be &#8220;frozen&#8221; in place so that they are always visible on the screen and appear on every page when the spreadsheet is printed (which is handy for headers).</p>
<h4 class="h4" id="ch13lev2sec17"><strong><em>Setting Row Height and Column Width</em></strong></h4>
<p class="noindent"><span class="literal">Worksheet</span> objects have <span class="literal">row_dimensions</span> and <span class="literal">column_dimensions</span> attributes that control row heights and column widths. Enter this into the interactive shell:</p>
<p class="programs">&gt;&gt;&gt; <span class="codestrong1">import openpyxl</span><br/>
&gt;&gt;&gt; <span class="codestrong1">wb = openpyxl.Workbook()</span><br/>
&gt;&gt;&gt; <span class="codestrong1">sheet = wb.active</span><br/>
&gt;&gt;&gt; <span class="codestrong1">sheet['A1'] = 'Tall row'</span><br/>
&gt;&gt;&gt; <span class="codestrong1">sheet['B2'] = 'Wide column'</span><br/>
&gt;&gt;&gt; # Set the height and width:<br/>
&gt;&gt;&gt; <span class="codestrong1">sheet.row_dimensions[1].height = 70</span><br/>
&gt;&gt;&gt; <span class="codestrong1">sheet.column_dimensions['B'].width = 20</span><br/>
&gt;&gt;&gt; <span class="codestrong1">wb.save('dimensions.xlsx')</span></p>
<p class="indent">A sheet&#8217;s <span class="literal">row_dimensions</span> and <span class="literal">column_dimensions</span> are dictionary-like values; <span class="literal">row_dimensions</span> contains <span class="literal">RowDimension</span> objects and <span class="literal">column_dimensions</span> contains <span class="literal">ColumnDimension</span> objects. In <span class="literal">row_dimensions</span>, you can access one of the objects using the number of the row (in this case, 1 or 2). In <span class="literal">column_dimensions</span>, you can access one of the objects using the letter of the column (in this case, A or B).</p>
<p class="indent">The <em>dimensions.xlsx</em> spreadsheet looks like <a href="ch13.xhtml#ch13fig06">Figure 13-6</a>.</p>
<div class="image"><a id="ch13fig06"/><img src="../images/13fig06.jpg" alt="image"/></div>
<p class="figcap"><em>Figure 13-6: Row 1 and column B set to larger heights and widths</em></p>
<p class="indent">Once you have the <span class="literal">RowDimension</span> object, you can set its height. Once you have the <span class="literal">ColumnDimension</span> object, you can set its width. The row height can be set to an integer or float value between <span class="literal">0</span> and <span class="literal">409</span>. This value represents the height measured in <em>points</em>, where one point equals 1/72 of an inch. The default row height is 12.75. The column width can be set to an integer or float value between <span class="literal">0</span> and <span class="literal">255</span>. This value represents the number of characters at the default font size (11 point) that can be displayed in the cell. The default column width is 8.43 characters. Columns with widths of <span class="literal">0</span> or rows with heights of <span class="literal">0</span> are hidden from the user.</p>
<h4 class="h4" id="ch13lev2sec18"><span epub:type="pagebreak" id="page_322"/><strong><em>Merging and Unmerging Cells</em></strong></h4>
<p class="noindent">A rectangular area of cells can be merged into a single cell with the <span class="literal">merge_cells()</span> sheet method. Enter the following into the interactive shell:</p>
<p class="programs">&gt;&gt;&gt; <span class="codestrong1">import openpyxl</span><br/>
&gt;&gt;&gt; <span class="codestrong1">wb = openpyxl.Workbook()</span><br/>
&gt;&gt;&gt; <span class="codestrong1">sheet = wb.active</span><br/>
&gt;&gt;&gt; <span class="codestrong1">sheet.merge_cells('A1:D3')</span> # Merge all these cells.<br/>
&gt;&gt;&gt; <span class="codestrong1">sheet['A1'] = 'Twelve cells merged together.'</span><br/>
&gt;&gt;&gt; <span class="codestrong1">sheet.merge_cells('C5:D5')</span> # Merge these two cells.<br/>
&gt;&gt;&gt; <span class="codestrong1">sheet['C5'] = 'Two merged cells.'</span><br/>
&gt;&gt;&gt; <span class="codestrong1">wb.save('merged.xlsx')</span></p>
<p class="indent">The argument to <span class="literal">merge_cells()</span> is a single string of the top-left and bottom-right cells of the rectangular area to be merged: <span class="literal">'A1:D3'</span> merges 12 cells into a single cell. To set the value of these merged cells, simply set the value of the top-left cell of the merged group.</p>
<p class="indent">When you run this code, <em>merged.xlsx</em> will look like <a href="ch13.xhtml#ch13fig07">Figure 13-7</a>.</p>
<div class="image"><a id="ch13fig07"/><img src="../images/13fig07.jpg" alt="image"/></div>
<p class="figcap"><em>Figure 13-7: Merged cells in a spreadsheet</em></p>
<p class="indent">To unmerge cells, call the <span class="literal">unmerge_cells()</span> sheet method. Enter this into the interactive shell:</p>
<p class="programs">&gt;&gt;&gt; <span class="codestrong1">import openpyxl</span><br/>
&gt;&gt;&gt; <span class="codestrong1">wb = openpyxl.load_workbook('merged.xlsx')</span><br/>
&gt;&gt;&gt; <span class="codestrong1">sheet = wb.active</span><br/>
&gt;&gt;&gt; <span class="codestrong1">sheet.unmerge_cells('A1:D3')</span> # Split these cells up.<br/>
&gt;&gt;&gt; <span class="codestrong1">sheet.unmerge_cells('C5:D5')</span><br/>
&gt;&gt;&gt; <span class="codestrong1">wb.save('merged.xlsx')</span></p>
<p class="indent">If you save your changes and then take a look at the spreadsheet, you&#8217;ll see that the merged cells have gone back to being individual cells.</p>
<h4 class="h4" id="ch13lev2sec19"><strong><em>Freezing Panes</em></strong></h4>
<p class="noindent">For spreadsheets too large to be displayed all at once, it&#8217;s helpful to &#8220;freeze&#8221; a few of the top rows or leftmost columns onscreen. Frozen column or row headers, for example, are always visible to the user even as <span epub:type="pagebreak" id="page_323"/>they scroll through the spreadsheet. These are known as <em>freeze panes</em>. In OpenPyXL, each <span class="literal">Worksheet</span> object has a <span class="literal">freeze_panes</span> attribute that can be set to a <span class="literal">Cell</span> object or a string of a cell&#8217;s coordinates. Note that all rows above and all columns to the left of this cell will be frozen, but the row and column of the cell itself will not be frozen.</p>
<p class="indent">To unfreeze all panes, set <span class="literal">freeze_panes</span> to <span class="literal">None</span> or <span class="literal">'A1'</span>. <a href="ch13.xhtml#ch13tab03">Table 13-3</a> shows which rows and columns will be frozen for some example settings of <span class="literal">freeze_panes</span>.</p>
<p class="tabcap" id="ch13tab03"><strong>Table 13-3:</strong> Frozen Pane Examples</p>
<table class="topbot-d">
<colgroup>
<col style="width:50%"/>
<col style="width:50%"/>
</colgroup>
<thead>
<tr>
<td style="vertical-align: top;" class="table-h"><p class="tab_th"><span class="codestrong">freeze_panes</span> <strong>setting</strong></p></td>
<td style="vertical-align: top;" class="table-h"><p class="tab_th"><strong>Rows and columns frozen</strong></p></td>
</tr>
</thead>
<tbody>
<tr>
<td style="vertical-align: top;" class="table-b"><p class="taba"><span class="literal">sheet.freeze_panes = 'A2'</span></p></td>
<td style="vertical-align: top;" class="table-b"><p class="taba">Row 1</p></td>
</tr>
<tr>
<td style="vertical-align: top;" class="table-v"><p class="taba"><span class="literal">sheet.freeze_panes = 'B1'</span></p></td>
<td style="vertical-align: top;" class="table-v"><p class="taba">Column A</p></td>
</tr>
<tr>
<td style="vertical-align: top;" class="table-b"><p class="taba"><span class="literal">sheet.freeze_panes = 'C1'</span></p></td>
<td style="vertical-align: top;" class="table-b"><p class="taba">Columns A and B</p></td>
</tr>
<tr>
<td style="vertical-align: top;" class="table-v"><p class="taba"><span class="literal">sheet.freeze_panes = 'C2'</span></p></td>
<td style="vertical-align: top;" class="table-v"><p class="taba">Row 1 and columns A and B</p></td>
</tr>
<tr>
<td style="vertical-align: top;" class="table-ba"><p class="taba"><span class="literal">sheet.freeze_panes = 'A1'</span> or <span class="literal">sheet.freeze_panes = None</span></p></td>
<td style="vertical-align: top;" class="table-ba"><p class="taba">No frozen panes</p></td>
</tr>
</tbody>
</table>
<p class="indent">Make sure you have the produce sales spreadsheet from <em><a href="https://nostarch.com/automatestuff2/">https://nostarch.com/automatestuff2/</a></em>. Then enter the following into the interactive shell:</p>
<p class="programs">&gt;&gt;&gt; <span class="codestrong1">import openpyxl</span><br/>
&gt;&gt;&gt; <span class="codestrong1">wb = openpyxl.load_workbook('produceSales.xlsx')</span><br/>
&gt;&gt;&gt; <span class="codestrong1">sheet = wb.active</span><br/>
&gt;&gt;&gt; <span class="codestrong1">sheet.freeze_panes = 'A2'</span> # Freeze the rows above A2.<br/>
&gt;&gt;&gt; <span class="codestrong1">wb.save('freezeExample.xlsx')</span></p>
<p class="indent">If you set the <span class="literal">freeze_panes</span> attribute to <span class="literal">'A2'</span>, row 1 will always be viewable, no matter where the user scrolls in the spreadsheet. You can see this in <a href="ch13.xhtml#ch13fig08">Figure 13-8</a>.</p>
<div class="image"><a id="ch13fig08"/><img src="../images/13fig08.jpg" alt="image"/></div>
<p class="figcap"><em>Figure 13-8: With <span class="literal">freeze_panes</span> set to <span class="literal">'A2'</span>, row 1 is always visible, even as the user scrolls down.</em></p>
<h3 class="h3" id="ch13lev1sec11"><span epub:type="pagebreak" id="page_324"/><strong>Charts</strong></h3>
<p class="noindent">OpenPyXL supports creating bar, line, scatter, and pie charts using the data in a sheet&#8217;s cells. To make a chart, you need to do the following:</p>
<ol>
<li class="noindent">Create a <span class="literal">Reference</span> object from a rectangular selection of cells.</li>
<li class="noindent">Create a <span class="literal">Series</span> object by passing in the <span class="literal">Reference</span> object.</li>
<li class="noindent">Create a <span class="literal">Chart</span> object.</li>
<li class="noindent">Append the <span class="literal">Series</span> object to the <span class="literal">Chart</span> object.</li>
<li class="noindent">Add the <span class="literal">Chart</span> object to the <span class="literal">Worksheet</span> object, optionally specifying which cell should be the top-left corner of the chart.</li>
</ol>
<p class="indent">The <span class="literal">Reference</span> object requires some explaining. You create <span class="literal">Reference</span> objects by calling the <span class="literal">openpyxl.chart.Reference()</span> function and passing three arguments:</p>
<ol>
<li class="noindent">The <span class="literal">Worksheet</span> object containing your chart data.</li>
<li class="noindent">A tuple of two integers, representing the top-left cell of the rectangular selection of cells containing your chart data: the first integer in the tuple is the row, and the second is the column. Note that <span class="literal">1</span> is the first row, not <span class="literal">0</span>.</li>
<li class="noindent">A tuple of two integers, representing the bottom-right cell of the rectangular selection of cells containing your chart data: the first integer in the tuple is the row, and the second is the column.</li>
</ol>
<p class="indent"><a href="ch13.xhtml#ch13fig09">Figure 13-9</a> shows some sample coordinate arguments.</p>
<div class="image"><a id="ch13fig09"/><img src="../images/13fig09.jpg" alt="image"/></div>
<p class="figcap"><em>Figure 13-9: From left to right: <span class="literal">(1, 1), (10, 1)</span>; <span class="literal">(3, 2), (6, 4)</span>; <span class="literal">(5, 3), (5, 3)</span></em></p>
<p class="indent">Enter this interactive shell example to create a bar chart and add it to the spreadsheet:</p>
<p class="programs">&gt;&gt;&gt; <span class="codestrong1">import openpyxl</span><br/>
&gt;&gt;&gt; <span class="codestrong1">wb = openpyxl.Workbook()</span><br/>
&gt;&gt;&gt; <span class="codestrong1">sheet = wb.active</span><br/>
&gt;&gt;&gt; <span class="codestrong1">for i in range(1, 11):</span> # create some data in column A<br/>
<span class="codestrong1">...&#160;&#160;&#160;&#160;&#160;sheet['A' + str(i)] = i</span><br/>
...<br/>
&gt;&gt;&gt; <span class="codestrong1">refObj = openpyxl.chart.Reference(sheet, min_col=1, min_row=1, max_col=1,<br/>
max_row=10)</span><br/>
<span epub:type="pagebreak" id="page_325"/>&gt;&gt;&gt; <span class="codestrong1">seriesObj = openpyxl.chart.Series(refObj, title='First series')</span><br/><br/>
&gt;&gt;&gt; <span class="codestrong1">chartObj = openpyxl.chart.BarChart()</span><br/>
&gt;&gt;&gt; <span class="codestrong1">chartObj.title = 'My Chart'</span><br/>
&gt;&gt;&gt; <span class="codestrong1">chartObj.append(seriesObj)</span><br/><br/>
&gt;&gt;&gt; <span class="codestrong1">sheet.add_chart(chartObj, 'C5')</span><br/>
&gt;&gt;&gt; <span class="codestrong1">wb.save('sampleChart.xlsx')</span></p>
<p class="indent">This produces a spreadsheet that looks like <a href="ch13.xhtml#ch13fig10">Figure 13-10</a>.</p>
<div class="image"><a id="ch13fig10"/><img src="../images/13fig10.jpg" alt="image"/></div>
<p class="figcap"><em>Figure 13-10: A spreadsheet with a chart added</em></p>
<p class="indent">We&#8217;ve created a bar chart by calling <span class="literal">openpyxl.chart.BarChart()</span>. You can also create line charts, scatter charts, and pie charts by calling <span class="literal">openpyxl.charts.LineChart()</span>, <span class="literal">openpyxl.chart.ScatterChart()</span>, and <span class="literal">openpyxl.chart.PieChart()</span>.</p>
<h3 class="h3" id="ch13lev1sec12"><strong>Summary</strong></h3>
<p class="noindent">Often the hard part of processing information isn&#8217;t the processing itself but simply getting the data in the right format for your program. But once you have your spreadsheet loaded into Python, you can extract and manipulate its data much faster than you could by hand.</p>
<p class="indent">You can also generate spreadsheets as output from your programs. So if colleagues need your text file or PDF of thousands of sales contacts transferred to a spreadsheet file, you won&#8217;t have to tediously copy and paste it all into Excel.</p>
<p class="indent">Equipped with the <span class="literal">openpyxl</span> module and some programming knowledge, you&#8217;ll find processing even the biggest spreadsheets a piece of cake.</p>
<p class="indent">In the next chapter, we&#8217;ll take a look at using Python to interact with another spreadsheet program: the popular online Google Sheets application.</p>
<h3 class="h3" id="ch13lev1sec13"><span epub:type="pagebreak" id="page_326"/><strong>Practice Questions</strong></h3>
<p class="noindent">For the following questions, imagine you have a <span class="literal">Workbook</span> object in the variable <span class="literal">wb</span>, a <span class="literal">Worksheet</span> object in <span class="literal">sheet</span>, a <span class="literal">Cell</span> object in <span class="literal">cell</span>, a <span class="literal">Comment</span> object in <span class="literal">comm</span>, and an <span class="literal">Image</span> object in <span class="literal">img</span>.</p>
<p class="question"><a id="ch13que1" href="app03.xhtml#ch13ans1">1</a>. What does the <span class="literal">openpyxl.load_workbook()</span> function return?</p>
<p class="question"><a id="ch13que2" href="app03.xhtml#ch13ans2">2</a>. What does the <span class="literal">wb.sheetnames</span> workbook attribute contain?</p>
<p class="question"><a id="ch13que3" href="app03.xhtml#ch13ans3">3</a>. How would you retrieve the <span class="literal">Worksheet</span> object for a sheet named <span class="literal">'Sheet1'</span>?</p>
<p class="question"><a id="ch13que4" href="app03.xhtml#ch13ans4">4</a>. How would you retrieve the <span class="literal">Worksheet</span> object for the workbook&#8217;s active sheet?</p>
<p class="question"><a id="ch13que5" href="app03.xhtml#ch13ans5">5</a>. How would you retrieve the value in the cell C5?</p>
<p class="question"><a id="ch13que6" href="app03.xhtml#ch13ans6">6</a>. How would you set the value in the cell C5 to <span class="literal">"Hello"</span>?</p>
<p class="question"><a id="ch13que7" href="app03.xhtml#ch13ans7">7</a>. How would you retrieve the cell&#8217;s row and column as integers?</p>
<p class="question"><a id="ch13que8" href="app03.xhtml#ch13ans8">8</a>. What do the <span class="literal">sheet.max_column</span> and <span class="literal">sheet.max_row</span> sheet attributes hold, and what is the data type of these attributes?</p>
<p class="question"><a id="ch13que9" href="app03.xhtml#ch13ans9">9</a>. If you needed to get the integer index for column <span class="literal">'M'</span>, what function would you need to call?</p>
<p class="question1"><a id="ch13que10" href="app03.xhtml#ch13ans10">10</a>. If you needed to get the string name for column <span class="literal">14</span>, what function would you need to call?</p>
<p class="question1"><a id="ch13que11" href="app03.xhtml#ch13ans11">11</a>. How can you retrieve a tuple of all the <span class="literal">Cell</span> objects from A1 to F1?</p>
<p class="question1"><a id="ch13que12" href="app03.xhtml#ch13ans12">12</a>. How would you save the workbook to the filename <em>example.xlsx</em>?</p>
<p class="question1"><a id="ch13que13" href="app03.xhtml#ch13ans13">13</a>. How do you set a formula in a cell?</p>
<p class="question1"><a id="ch13que14" href="app03.xhtml#ch13ans14">14</a>. If you want to retrieve the result of a cell&#8217;s formula instead of the cell&#8217;s formula itself, what must you do first?</p>
<p class="question1"><a id="ch13que15" href="app03.xhtml#ch13ans15">15</a>. How would you set the height of row 5 to 100?</p>
<p class="question1"><a id="ch13que16" href="app03.xhtml#ch13ans16">16</a>. How would you hide column C?</p>
<p class="question1"><a id="ch13que17" href="app03.xhtml#ch13ans17">17</a>. What is a freeze pane?</p>
<p class="question1"><a id="ch13que18" href="app03.xhtml#ch13ans18">18</a>. What five functions and methods do you have to call to create a bar chart?</p>
<h3 class="h3" id="ch13lev1sec14"><strong>Practice Projects</strong></h3>
<p class="noindent">For practice, write programs that perform the following tasks.</p>
<h4 class="h4" id="ch13lev2sec20"><strong><em>Multiplication Table Maker</em></strong></h4>
<p class="noindent">Create a program <em>multiplicationTable.py</em> that takes a number <em>N</em> from the command line and creates an <em>N</em>&#215;<em>N</em> multiplication table in an Excel spreadsheet. For example, when the program is run like this:</p>
<p class="programs">py multiplicationTable.py 6</p>
<p class="noindent">. . . it should create a spreadsheet that looks like <a href="ch13.xhtml#ch13fig11">Figure 13-11</a>.</p>
<div class="image"><span epub:type="pagebreak" id="page_327"/><a id="ch13fig11"/><img src="../images/13fig11.jpg" alt="image"/></div>
<p class="figcap"><em>Figure 13-11: A multiplication table generated in a spreadsheet</em></p>
<p class="indent">Row 1 and column A should be used for labels and should be in bold.</p>
<h4 class="h4" id="ch13lev2sec21"><strong><em>Blank Row Inserter</em></strong></h4>
<p class="noindent">Create a program <em>blankRowInserter.py</em> that takes two integers and a filename string as command line arguments. Let&#8217;s call the first integer <em>N</em> and the second integer <em>M</em>. Starting at row <em>N</em>, the program should insert <em>M</em> blank rows into the spreadsheet. For example, when the program is run like this:</p>
<p class="programs">python blankRowInserter.py 3 2 myProduce.xlsx</p>
<p class="noindent">. . . the &#8220;before&#8221; and &#8220;after&#8221; spreadsheets should look like <a href="ch13.xhtml#ch13fig12">Figure 13-12</a>.</p>
<div class="image"><a id="ch13fig12"/><img src="../images/13fig12.jpg" alt="image"/></div>
<p class="figcap"><em>Figure 13-12: Before (left) and after (right) the two blank rows are inserted at row 3</em></p>
<p class="indent">You can write this program by reading in the contents of the spreadsheet. Then, when writing out the new spreadsheet, use a <span class="literal">for</span> loop to copy the first <em>N</em> lines. For the remaining lines, add <em>M</em> to the row number in the output spreadsheet.</p>
<h4 class="h4" id="ch13lev2sec22"><strong><em>Spreadsheet Cell Inverter</em></strong></h4>
<p class="noindent">Write a program to invert the row and column of the cells in the spreadsheet. For example, the value at row 5, column 3 will be at row 3, column 5 (and vice versa). This should be done for all cells in the spreadsheet. For example, the &#8220;before&#8221; and &#8220;after&#8221; spreadsheets would look something like <a href="ch13.xhtml#ch13fig13">Figure 13-13</a>.</p>
<div class="image"><span epub:type="pagebreak" id="page_328"/><a id="ch13fig13"/><img src="../images/13fig13.jpg" alt="image"/></div>
<p class="figcap"><em>Figure 13-13: The spreadsheet before (top) and after (bottom) inversion</em></p>
<p class="indent">You can write this program by using nested <span class="literal">for</span> loops to read the spreadsheet&#8217;s data into a list of lists data structure. This data structure could have <span class="literal">sheetData[x][y]</span> for the cell at column <span class="literal">x</span> and row <span class="literal">y</span>. Then, when writing out the new spreadsheet, use <span class="literal">sheetData[y][x]</span> for the cell at column <span class="literal">x</span> and row <span class="literal">y</span>.</p>
<h4 class="h4" id="ch13lev2sec23"><strong><em>Text Files to Spreadsheet</em></strong></h4>
<p class="noindent">Write a program to read in the contents of several text files (you can make the text files yourself) and insert those contents into a spreadsheet, with one line of text per row. The lines of the first text file will be in the cells of column A, the lines of the second text file will be in the cells of column B, and so on.</p>
<p class="indent">Use the <span class="literal">readlines()</span> <span class="literal">File</span> object method to return a list of strings, one string per line in the file. For the first file, output the first line to column 1, row 1. The second line should be written to column 1, row 2, and so on. The next file that is read with <span class="literal">readlines()</span> will be written to column 2, the next file to column 3, and so on.</p>
<h4 class="h4" id="ch13lev2sec24"><strong><em>Spreadsheet to Text Files</em></strong></h4>
<p class="noindent">Write a program that performs the tasks of the previous program in reverse order: the program should open a spreadsheet and write the cells of column A into one text file, the cells of column B into another text file, and so on.</p>
</body>
</html>
